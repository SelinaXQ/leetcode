139. Word Break
(1) dynamic programming
* Time complexity: O(N^2)
* Space complexity: O(n)
public boolean wordBreak(String s, List<String> wordDict) {
        int n = s.length();
        boolean[] dp = new boolean[n+1];
        dp[0] = true;
        //we initialize the element dp[0] as true, 
        //since the null string is always present in the dictionary, and the rest of the elements of dp as false.
        for(int i = 1; i<=n; i++){
            for(int j = 0; j<i ; j++){
                if(dp[j]&&wordDict.contains(s.substring(j,i))){
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[n];
    }
(2) bfs
* Time complexity: O(N^2)
* Space complexity: O(n)
public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> wordDictSet = new HashSet(wordDict);
        Queue<Integer> queue = new LinkedList<>();
        int[] visited = new int[s.length()];
        queue.offer(0);
        while(!queue.isEmpty()){
            int start = queue.poll();
            if(visited[start] == 0){
                for(int end = start+1; end<=s.length(); end++){
                    if(wordDictSet.contains(s.substring(start, end))){
                        queue.add(end);
                        if(end == s.length()){
                            return true;
                        }
                    }
                }
                visited[start] = 1;
            }
        }
        return false;
    }

140. Word Break II dfs
* Time complexity: O(n^3)
* Space complexity: O(n^3)
public List<String> wordBreak(String s, List<String> wordDict) {
        Map<Integer, List<String>> map = new HashMap<>();
        return dfs(s, wordDict, 0, map);
    }
    private List<String> dfs(String s, List<String> wordDict, int start, Map<Integer, List<String>> map){
        if(map.containsKey(start)) return map.get(start);
        List<String> res = new ArrayList<>();
        if(start == s.length()) res.add("");//end of answer, no space
        for(int end = start+1; end<=s.length(); end++){
            if(wordDict.contains(s.substring(start, end))){
                List<String> list = dfs(s, wordDict, end, map);
                for(String temp: list){
                    res.add(s.substring(start, end)+(temp.equals("")?"":" ")+temp);
                }
            }
        }
        map.put(start, res);
        return res;
    }

141. Linked List Cycle HashSet
* Time complexity: O(n)
* Space complexity: O(n)
(1) hashset
public boolean hasCycle(ListNode head) {
        Set<ListNode> set = new HashSet<>();
        while(head!=null){
            if(!set.contains(head)) {
                set.add(head);
                head = head.next;
            }else return true;
        }
        return false;
    }
(2) two pointers
* Time complexity: O(n)
* Space complexity: O(1)
public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null)
            return false;

        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast)
                return true;
        }

        return false;
    }
142. Linked List Cycle 2
(1) hash-set
* Time complexity: O(n)
* Space complexity: O(n)
public ListNode detectCycle(ListNode head) {
        Set<ListNode> set = new HashSet();
        ListNode node = head;
        while(node!=null){
            if(!set.add(node)){
                return node;
            }
            node = node.next;
        }
        return null;
    }
(2) two pointers
public ListNode detectCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast!=null && fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast) break;
        }
        if(fast == null || fast.next == null) return null;
        slow = head;
        while(slow!=fast){
            slow = slow.next;
            fast = fast.next;
        }
        return slow;
    }
143. Reorder List 
* Time complexity: O(n)
* Space complexity: O(1)
public void reorderList(ListNode head) {
        if(head == null || head.next == null) return;
        //first we use two pointers to seperate this list into two pointers
        ListNode slow = head;
        ListNode fast = head;
        while(fast.next!=null){
            fast = fast.next;
            if(fast.next!=null) fast = fast.next;
            else break;
            slow = slow.next;
        }
        //two sublist heads
        ListNode head1 = head;
        ListNode head2 = slow.next;
        slow.next = null;
        //reverse the second sublist
        ListNode curr = head2;
        ListNode post = curr.next;
        curr.next = null;
        while(post!=null){
            ListNode temp = post.next;
            post.next = curr;
            curr = post;
            post = temp;
        }
        head2 = curr;//the new head of the reversed sublist
        //merge the two sublists as required
        ListNode p = head1;
        ListNode q = head2;
        while(q!=null){
            ListNode temp1 = p.next;
            ListNode temp2 = q.next;
            p.next = q;
            q.next = temp1;
            p = temp1;
            q = temp2;
        }
    }

144. Binary Tree Preorder Traversal
(1) dfs
* Time complexity: O(n)
* Space complexity: O(n)
public List<Integer> preorderTraversal(TreeNode root) {
        LinkedList<Integer> res = new LinkedList<Integer>();
        if(root == null) return res;
        dfs(root, res);
        return res;
    }
    private List<Integer> dfs(TreeNode root, LinkedList<Integer> list) {
        if(root == null) return list;
        list.add(root.val);
        dfs(root.left, list);
        dfs(root.right, list);
        return list;
    }
(2) iteration
* Time complexity: O(n)
* Space complexity: O(n)
public List<Integer> preorderTraversal(TreeNode root) {
        if(root == null) return new ArrayList<>();
        List<Integer> res = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curr = root;

        while (curr != null || !stack.isEmpty()) {
            if (curr == null) curr = stack.pop();
            res.add(curr.val);
            if (curr.right != null) stack.push(curr.right);
            curr = curr.left;
        }

        return res;
    }
145. Binary Tree Postorder Traversal
(1) dfs
public List<Integer> postorderTraversal(TreeNode root) {
        LinkedList<Integer> res = new LinkedList<Integer>();
        if(root == null) return res;
        dfs(root, res);
        return res;
    }
    private List<Integer> dfs(TreeNode root, LinkedList<Integer> list){
        if(root == null) return list;
        dfs(root.left, list);
        dfs(root.right, list);
        list.add(root.val);
        return list;
    }
(2) iteration
public List<Integer> postorderTraversal(TreeNode root) {
        LinkedList<Integer> res = new LinkedList<>();
        if(root == null) return res;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode curr = stack.pop();
            res.addFirst(curr.val);
            if(curr.left!=null) stack.push(curr.left);
            if(curr.right!=null) stack.push(curr.right);
        }
        return res;
    }

146. LRU cache
* Time complexity:O(1)
* Space complexity: O(capacity)
(1) LinkedHashMap not expected by interviewer
1. In the constructor, the third boolean parameter specifies the ordering mode. If we set it to true, it will be in access order. (https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html#LinkedHashMap-int-float-boolean-)

2. By overriding removeEldestEntry in this way, we do not need to take care of it ourselves. It will automatically remove the least recent one when the size of map exceeds the specified capacity.(https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html#removeEldestEntry-java.util.Map.Entry-)
class LRUCache {
    private Map<Integer, Integer> cache;
    private final int max;
    //LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder)
    /*
     * @param  initialCapacity the initial capacity
     * @param  loadFactor      the load factor
     * @param  accessOrder     the ordering mode - <tt>true</tt> for
     *         access-order, <tt>false</tt> for insertion-order
    */
    public LRUCache(int capacity) {
        max = capacity;
        cache = new LinkedHashMap<Integer, Integer>(capacity, 1.0f, true){
            public boolean removeEldestEntry(Map.Entry eldest){
                return cache.size()>max;
            }
        };
    }
    
    public int get(int key) {
        return cache.getOrDefault(key, -1);
    }
    
    public void put(int key, int value) {
        cache.put(key, value);
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
(2) HashMap + doubly-linked list
public class LRUCache {
    private class Node{
        int key, value;
        Node prev, next;
        Node(int k, int v){
            this.key = k;
            this.value = v;
        }
        Node(){
            this(0, 0);
        }
    }
    private int capacity, count;
    private Map<Integer, Node> map;
    private Node head, tail;
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.count = 0;
        map = new HashMap<>();
        head = new Node();
        tail = new Node();
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        Node n = map.get(key);
        if(n==null){
            return -1;
        }
        update(n);
        return n.value;
    }
    
    public void put(int key, int value) {
        Node n = map.get(key);
        if(n==null){
            n = new Node(key, value);
            map.put(key, n);
            add(n);
            ++count;
        }
        else{
            n.value = value;
            update(n);
        }
        if(count>capacity){
            Node toDel = tail.prev;
            remove(toDel);
            map.remove(toDel.key);
            --count;
        }
    }
    
    private void update(Node node){
        remove(node);
        add(node);
    }
    private void add(Node node){
        Node after = head.next;
        head.next = node;
        node.prev = head;
        node.next = after;
        after.prev = node;
    }
    
    private void remove(Node node){
        Node before = node.prev, after = node.next;
        before.next = after;
        after.prev = before;
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
