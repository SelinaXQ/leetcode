274. H-Index
wiki上直接给出了算法，可以按照如下方法确定某人的H指数：1、将其发表的所有SCI论文按被引次数从高到低排序；2、从前往后查找排序后的列表，直到某篇论文的序号大于该论文被引次数。所得序号减一即为H指数。
(1) sort
* Time complexity: O(nlogn)
* Space complexity: O(1)
public int hIndex(int[] citations) {
        if(citations == null || citations.length == 0)
            return 0;
        Arrays.sort(citations);
        for(int i = 0; i<citations.length; i++){
            if(i >= citations[citations.length - 1 - i])
                return i;
        }
        return citations.length;
    }

(2) bucket sort
* Time complexity: O(n)
* Space complexity: O(n)
public int hIndex(int[] citations) {
        if (citations == null || citations.length == 0)
            return 0;

        int[] buckets = new int[citations.length + 1];
        for(int c : citations) {
            if(c >= citations.length) {
                buckets[citations.length]++;
            } else {
                buckets[c]++;
            }
        }
        int count = 0;
        for(int i = citations.length; i >= 0; i--) {
            count += buckets[i];
            if(count >= i) {
                return i;
            }
        }
        return 0;
    }

275. H-Index II
Given an array of citations sorted in ascending order
* Time complexity: O(logn)
* Space complexity: O(1)
 public int hIndex(int[] citations) {
        int len = citations.length;
        int left = 0, right = len-1;
        while(left <= right){
            int mid = left + (right - left)/2;
            if(citations[mid] == len - mid)
                return len - mid;
            else if(citations[mid] > len - mid)
                right = mid - 1;
            else left = mid + 1;
        }
        return len - left;
    }

276. Paint Fence
如果n=0的话，说明没有需要刷的部分，直接返回0即可，如果n为1的话，那么有几种颜色，就有几种刷法，所以应该返回k，当n=2时，k=2时，我们可以分两种情况来统计，一种是相邻部分没有相同的，一种相同部分有相同的颜色，那么对于没有相同的，对于第一个格子，我们有k种填法，对于下一个相邻的格子，由于不能相同，所以我们只有k-1种填法。而有相同部分颜色的刷法和上一个格子的不同颜色刷法相同，因为我们下一格的颜色和之前那个格子颜色刷成一样的即可，最后总共的刷法就是把不同和相同两个刷法加起来
* Time complexity: O(n)
* Space complexity: O(1)
public int numWays(int n, int k) {
        if(n == 0) return 0;
        if(n == 1) return k;
        
        int same = 0;
        int diff = k;
        for(int i = 2; i<=n; i++){
            int temp = diff;
            diff = (same + diff)*(k-1);
            same = temp;
        }
        
        return same + diff;
    }

277. Find The Celebrity
(1) Array
建立个一维数组用来标记每个人的名人候选状态，开始均初始化为 true，表示每个人都是名人候选人，然后我们一个人一个人的验证其是否为名人，对于候选者i，我们遍历所有其他人j，如果i认识j，或者j不认识i，说明i不可能是名人，那么我们标记其为 false，然后验证下一个候选者，反之如果i不认识j，或者j认识i，说明j不可能是名人，标记之。对于每个候选者i，如果遍历了一圈而其候选者状态仍为 true，说明i就是名人，返回即可，如果遍历完所有人没有找到名人，返回 -1
* Time complexity: O(n^2)
* Space complexity: O(n)
public int findCelebrity(int n) {
        boolean[] candidate = new boolean[n];
        Arrays.fill(candidate, true);
        
        for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                if(candidate[i] && i != j){
                    if(knows(i,j) || !knows(j,i)){
                        candidate[i] = false;
                        break;
                    }else{
                        candidate[j] = false;
                    }
                }
            }
            if(candidate[i]) 
                return i;
        }
        
        return -1;
    }

(2) Space O(1)
设定候选人 res 为0，原理是先遍历一遍，对于遍历到的人i，若候选人 res 认识i，则将候选人 res 设为i，完成一遍遍历后，我们来检测候选人 res 是否真正是名人，我们如果判断不是名人，则返回 -1，如果并没有冲突，返回 res.
* Time complexity: O(n)
* Space complexity: O(1)
public int findCelebrity(int n) {
        int res = 0;
        for(int i = 0; i<n; i++){
            if(knows(res, i))
                res = i;
        }
        for(int i = 0; i<n; i++){//验证
            if(res != i && knows(res, i) || !knows(i, res))
                return -1;
        }
        return res;
    }

(3) 减少API调用
我们还可以进一步减少 API 的调用量，找候选者的方法跟上面相同，但是在验证的时候，分为两段，先验证候选者前面的所有人，若候选者认识任何人，或者任何人不认识候选者，直接返回 -1。再验证候选者后面的人，这时候只需要验证是否有人不认识候选者就可以了，因为我们在最开始找候选者的时候就已经保证了候选者不会认识后面的任何人。
public int findCelebrity(int n) {
        int res = 0;
        for(int i = 0; i<n; i++){
            if(knows(res, i))
                res = i;
        }
        for(int i = 0; i<res; i++){
            if(!knows(i, res) || knows(res, i))
                return -1;
        }
        for(int i = res+1; i<n; i++){
            if(!knows(i, res))
                return -1;
        }
        return res;
    }

278. First Bad Version binary search
* Time complexity: O(logn)
* Space complexity: O(1)
public int firstBadVersion(int n) {
        int left = 1, right = n;
        while(left < right){
            int mid = left + (right - left)/2;
            if(isBadVersion(mid)){
                right = mid;
            }
            else left = mid + 1;
        }
        return left;
    }

279. Perfect Squares Lagrange's four-square theorem
根据四平方和定理，任意一个正整数均可表示为4个整数的平方和，其实是可以表示为4个以内的平方数之和，那么就是说返回结果只有 1,2,3 或4其中的一个。
首先我们将数字化简一下，由于一个数如果含有因子4，那么我们可以把4都去掉，并不影响结果，比如2和8,3和12等等，返回的结果都相同。
如果一个数除以8余7的话，那么肯定是由4个完全平方数组成。
做完两步后，一个很大的数有可能就会变得很小了，大大减少了运算时间，下面我们就来尝试的将其拆为两个平方数之和，如果拆成功了那么就会返回1或2，因为其中一个平方数可能为0. (注：由于输入的n是正整数，所以不存在两个平方数均为0的情况)。
注意下面的 !!a + !!b (C++, JAVA中没有这个符号， 用(a > 0 ? 1: 0) + (b > 0 ? 1 : 0) 代替) 这个表达式，可能很多人不太理解这个的意思，其实很简单，感叹号!表示逻辑取反，那么一个正整数逻辑取反为0，再取反为1，所以用两个感叹号!!的作用就是看a和b是否为正整数，都为正整数的话返回2，只有一个是正整数的话返回1
(1) trick

* Time complexity: O(sqrt(n))
* Space complexity: O(1)

public int numSquares(int n) {
        while(n % 4 == 0) 
            n /= 4;
        if(n % 8 == 7)
            return 4;
        for(int a = 0; a * a <= n; a++){
            int b = (int) Math.sqrt(n - a*a);
            if(a*a + b*b == n){
                return (a > 0 ? 1: 0) + (b > 0 ? 1 : 0);
            }
                
        }
        return 3;
    }
(2) dynamic programming
* Time complexity: O(n*sqrt(n))
* Space complexity: O(n)
public int numSquares(int n) {
        int[] dp = new int[n+1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for(int i = 0; i<=n; i++){
            for(int j = 1; i+j*j <= n; j++){
                dp[i + j*j] = Math.min(dp[i+j*j], dp[i]+1);
            }
        }
        return dp[n];
    }

280. Wiggle Sort
(1) sort
* Time complexity: O(nlogn)
* Space complexity: O(n)
public void wiggleSort(int[] nums) {
        
        int[] res = new int[nums.length];
        Arrays.sort(nums);
        int left = 0;
        int right = nums.length - 1;
        int i = 0;
        while(left<right){
            res[i++] = nums[left];
            res[i++] = nums[right];
            left++;
            right--;
        }
        if(left == right)
            res[i] = nums[left];
        for(int j = 0; j<nums.length; j++){
            nums[j] = res[j];
        }
        
    }
(2) sort with swap
* Time complexity: O(nlogn)
* Space complexity: O(1)
public void wiggleSort(int[] nums) {
        
        Arrays.sort(nums);
        if(nums.length <= 2) return;
        for(int i = 2; i<nums.length; i += 2){
            int temp = nums[i];
            nums[i] = nums[i-1];
            nums[i-1] = temp;
        }
        
    }

(3) O(n) 解法
这道题还有一种O(n)的解法，根据题目要求的nums[0] <= nums[1] >= nums[2] <= nums[3]....，我们可以总结出如下规律：
当i为奇数时，nums[i] >= nums[i - 1]
当i为偶数时，nums[i] <= nums[i - 1]
那么我们只要对每个数字，根据其奇偶性，跟其对应的条件比较，如果不符合就和前面的数交换位置即可。
* Time complexity: O(n)
* Space complexity: O(1)
public void wiggleSort(int[] nums) {
        if(nums.length <= 1) return;
        for(int i = 1; i<nums.length; i++){
            if((i % 2 == 1 && nums[i] < nums[i-1]) || (i % 2 == 0 && nums[i] > nums[i-1]) ){
                int temp = nums[i];
                nums[i] = nums[i-1];
                nums[i-1] = temp;
            }
        }
    }

281. ZigZag Iterator
(1) without iterator
public class ZigzagIterator {

    List<Integer> v1;
    List<Integer> v2;
    Queue<Integer> queue;
    int count = 0;
    
    public ZigzagIterator(List<Integer> v1, List<Integer> v2) {
        this.v1 = v1;
        this.v2 = v2;
        queue = new LinkedList<>();
    }

    public int next() {
        if(queue.size() == 0){
            if(count < v1.size())
                queue.add(v1.get(count));
            if(count < v2.size()){
                queue.add(v2.get(count));
            }
            count ++;
        }
        return queue.poll(); 
    }

    public boolean hasNext() {
        return !queue.isEmpty() || count < v1.size() || count < v2.size();
    }
}

/**
 * Your ZigzagIterator object will be instantiated and called as such:
 * ZigzagIterator i = new ZigzagIterator(v1, v2);
 * while (i.hasNext()) v[f()] = i.next();
 */

(2) with iterator
public class ZigzagIterator {

    Iterator<Integer> i1;
    Iterator<Integer> i2;
    int count;
    
    public ZigzagIterator(List<Integer> v1, List<Integer> v2) {
        i1 = v1.iterator();
        i2 = v2.iterator();
        count = 0;
    }

    public int next() {
        Iterator<Integer> i;
        if(count % 2 == 0){
            i = i1;
            if(!i1.hasNext()){
                i = i2;
            }
        }else{
            i = i2;
            if(!i2.hasNext())
                i = i1;
        }
        count++;
        return i.next();
    }

    public boolean hasNext() {
        return i1.hasNext() || i2.hasNext();
    }
}

/**
 * Your ZigzagIterator object will be instantiated and called as such:
 * ZigzagIterator i = new ZigzagIterator(v1, v2);
 * while (i.hasNext()) v[f()] = i.next();
 */

282. Expression Add Operators recursion
用递归来解题，我们需要两个变量diff和curNum，一个用来记录将要变化的值，另一个是当前运算后的值，而且它们都需要用 long 型的，因为字符串转为int型很容易溢出，所以我们用长整型。对于加和减，diff就是即将要加上的数和即将要减去的数的负值，而对于乘来说稍有些复杂，此时的diff应该是上一次的变化的diff乘以即将要乘上的数，有点不好理解，那我们来举个例子，比如 2+3*2，即将要运算到乘以2的时候，上次循环的 curNum = 5, diff = 3, 而如果我们要算这个乘2的时候，新的变化值diff应为 3*2=6，而我们要把之前+3操作的结果去掉，再加上新的diff，即 (5-3)+6=8，即为新表达式 2+3*2 的值
还有一点需要注意的是，如果输入为"000",0的话，容易出现以下的错误：
Wrong：["0+0+0","0+0-0","0+0*0","0-0+0","0-0-0","0-0*0","0*0+0","0*0-0","0*0*0","0+00","0-00","0*00","00+0","00-0","00*0","000"]
Correct：["0*0*0","0*0+0","0*0-0","0+0*0","0+0+0","0+0-0","0-0*0","0-0+0","0-0-0"]
我们可以看到错误的结果中有0开头的字符串出现，明显这不是数字，所以我们要去掉这些情况，过滤方法也很简单，我们只要判断长度大于1且首字符是‘0’的字符串，将其滤去即可。
* Time complexity: O(?)
* Space complexity: O(n)
class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> res = new ArrayList();
        helper(num, target, 0, 0, "", res);
        return res;
    }
    private void helper(String num, int target, long diff, long curNum, String out, List<String> res){
        if(num.length() == 0 && curNum == target){
            res.add(out);
            return;
        }
        for(int i = 1; i<=num.length(); i++){
            String cur = num.substring(0, i);
            if(cur.length() > 1 && cur.charAt(0) == '0')
                return;
            String next = num.substring(i);
            if(out.length() > 0){
                helper(next, target, Long.parseLong(cur), curNum + Long.parseLong(cur), out + "+" + cur, res);
                helper(next, target, -Long.parseLong(cur), curNum - Long.parseLong(cur), out + "-" + cur, res);
                helper(next, target, diff * Long.parseLong(cur), (curNum - diff) + diff * Long.parseLong(cur), out + "*" +cur, res);
            }else{
                helper(next, target, Long.parseLong(cur), Long.parseLong(cur), cur, res);
            }
        }
    }
}

283. Move Zeros
(1) two pointers
* Time complexity: O(n)
* Space complexity: O(1)
public void moveZeroes(int[] nums) {
        if(nums == null || nums.length == 0)
            return;
        int slow = 0, fast = 0;
        while(fast < nums.length){
            while(slow < nums.length && nums[slow] != 0){
                slow++;
            }
            fast = slow;
            while(fast<nums.length && nums[fast] == 0){
                fast++;
            }
            if(slow<nums.length && fast<nums.length){
                int temp = nums[slow];
                nums[slow] = nums[fast];
                nums[fast] = temp;
            }
        }
    }

(2) version2
j记录0的位置
public void moveZeroes(int[] nums) {
        if(nums == null || nums.length == 0)
            return;
        for(int i = 0, j = 0; i<nums.length; i++){
            if(nums[i] != 0){
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                j++;
            }
        }
    }
