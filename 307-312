307. Range Sum Query - Mutable design
(1) Sqrt Decomposition
The idea is to split the array in blocks with length of sqrt{n}. Then we calculate the sum of each block and store it in auxiliary memory b. To query RSQ(i, j), we will add the sums of all the blocks lying inside and those that partially overlap with range [i…j].
Algorithm

Figure 1. Range sum query using SQRT decomposition.
In the example above, the array nums's length is 9, which is split into blocks of size sqrt{9}. To get RSQ(1, 7) we add b[1]. It stores the sum of range [3, 5] and partially sums from block 0 and block 2, which are overlapping boundary blocks.

class NumArray {

    private int[] block;
    private int[] data;
    private int len;
    
    public NumArray(int[] nums) {
        if(nums == null || nums.length == 0)
            return;
        data = nums;
        double root = Math.sqrt(data.length);
        len = (int)Math.ceil(data.length / root);
        block = new int[len];
        for(int i = 0; i < data.length; i++){
            block[i/len] += data[i];
        }
        
    }
    
    public void update(int i, int val) {
        int idx = i/len;
        block[idx] += val - data[i];
        data[i] = val;
    }
    
    public int sumRange(int i, int j) {
        int sum = 0;
        int start = i/len;
        int end = j/len;
        if(start == end){
            for(int k = i; k<=j; k++){
                sum += data[k];
            }
            return sum;
        }
        for(int k = i; k < (start+1) * len; k++){
            sum += data[k];
        }
        for(int k = start+1; k<end; k++){
            sum += block[k];
        }
        for(int k = end * len; k<=j; k++){
            sum += data[k];
        }
        return sum;
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(i,val);
 * int param_2 = obj.sumRange(i,j);
 */
(2) Segment Tree
Algorithm
https://leetcode.com/problems/range-sum-query-mutable/solution/
Segment tree is a very flexible data structure, because it is used to solve numerous range query problems like finding minimum, maximum, sum, greatest common divisor, least common denominator in array in logarithmic time.

Figure 2. Illustration of Segment tree.
The segment tree for array a[0, 1, \ldots ,n-1]a[0,1,…,n−1] is a binary tree in which each node contains aggregate information (min, max, sum, etc.) for a subrange [i \ldots j][i…j] of the array, as its left and right child hold information for range [i \ldots \frac{i+j}{2}][i…2i+j] and [\frac{i + j}{2} + 1, j][2i+j+1,j].
Segment tree could be implemented using either an array or a tree. For an array implementation, if the element at index ii is not a leaf, its left and right child are stored at index 2i2i and 2i + 12i+1 respectively.
In the example above (Figure 2), every leaf node contains the initial array elements {2,4,5,7,8,9}. The internal nodes contain the sum of the corresponding elements in range - (11) for the elements from index 0 to index 2. The root (35) being the sum of its children (6);(29), holds the total sum of the entire array.
Segment Tree can be broken down to the three following steps:
1. Pre-processing step which builds the segment tree from a given array.
2. Update the segment tree when an element is modified.
3. Calculate the Range Sum Query using the segment tree.

https://www.cnblogs.com/grandyang/p/4985506.html
下面这种方法使用了 线段树 Segment Tree 来做，对线段树不是很了解的童鞋可以参见 网上这个帖子，在博主看来，线段树就是一棵加了些额外信息的满二叉树，比如可以加子树的结点和，或者最大值，最小值等等，这样，当某个结点的值发生变化时，只需要更新一下其所有祖先结点的信息，而并不需要更新整棵树，这样就极大的提高了效率。比如对于 [1 3 5 7] 这个数组，我们可以根据其坐标划分，组成一个线段树：

           [0, 3]
             16
       /            \
    [0, 1]        [2, 3]
      4             12
   /     \       /     \
[0, 0] [1, 1] [2, 2] [3, 3]
   1      3      5      7

其中，中括号表示是区间的范围，下方的数字是区间和，这样如果我们如果要更新区间 [2, 2] 中的数字5，那么之后只要再更新 [2, 3] 和 [0, 3] 两个区间即可，并不用更新所有的区间。而如果要求区间和，比如 [1, 3] 的话，那么只需要加上这两个区间 [1, 1] 和 [2, 3] 的和即可，感觉跟解法二的核心思想很类似。
将线段树的核心思想理解了之后，我们就要用它来解题了。这里，我们并不用建立专门的线段树结点，因为博主十分的不喜欢在 Solution 类中新建其他类，博主追求的是简约时尚的代码风格，所以我们可以只用一个数组来模拟线段树。大小是多少呢，首先肯定要包换 nums 中的n个数字了，对于一个有n个叶结点的平衡的满二叉树，其总结点个数不会超过2n个，不要问博主怎么证明，因为我也不会。但你可以任意举例子来验证，都是正确的。所以我们用一个大小为 2n 的 tree 数字，然后就要往里面填数字了。填数字的方式先给 tree 数组的后n个数字按顺序填上 nums 数字，比如对于 nums = [1 3 5 7]，那么 tree 数组首先填上：
_ _ _ _ 1 3 5 7
然后从 i=3 开始，每次填上 tree[2*n] + tree[2*n+1]，那么以此为：
_ _ _ 12 1 3 5 7
_ _ 4 12 1 3 5 7
_ 16 4 12 1 3 5 7
那么最终的 tree 数组就是 [0 16 4 12 1 3 5 7]，tree[0] 其实没啥作用，所以不用去管它。
接下来看 update 函数，比如我们想把5换成2，即调用 update(2, 2)，由于 nums 数组在 tree 数组中是从位置n开始的，所以i也要加n，变成了6。所以先把 tree[6] 换乘2，那么此时 tree 数组为：
0 16 4 12 1 3 2 7
然后还要更新之前的数字，做法是若i大于0，则进行 while 循环，因为我们知道 tree 数组中i位置的父结点是在 tree[i/2]，所以我们要更新 tree[i/2]，那么要更新父结点值，就要知道左右子结点值，而此时我们需要知道i是左子结点还是右子结点么？其实可以使用一个小 trick，就是对于结点i，跟其成对儿的另一个结点位置是 i^1，根据异或的性质，当i为奇数，i^1 为偶数，当i为偶数，i^1 为奇数，二者一直成对出现，这样左右子结点有了，直接更新父结点 i/2 即可，然后i自除以2，继续循环。tree数组的之后变化过程为：
0 16 4 9 1 3 2 7
0 13 4 9 1 3 2 7
13 13 4 9 1 3 2 7
可以看到，tree[0] 也被更新，但其实并没有什么卵用，不用理它。
接下来就是求区域和了，比如我们要求 sumRange(1, 3)，对于更新后的数组 nums = [1 3 2 7]，我们可以很快算出来，是 12。那么对于 tree = [13 13 4 9 1 3 2 7]，我们如何计算呢。当然还是要先进行坐标变换，i变为5，j变为7。然后进行累加，我们的策略是，若i是左子结点，那么跟其成对儿出现的右边的结点就在要求的区间里，则此时直接加上父结点值即可，若i是右子结点，那么只需要加上结点i本身即可。同理，若j是左子结点，那么只需要加上结点j本身，若j是右子结点，那么跟其成对儿出现的左边的结点就在要求的区间里，则此时直接加上父结点值即可。具体的实现方法是，判断若i是奇数，则说明其是右子结点，则加上 tree[i] 本身，然后i自增1；再判断若j是偶数，则说明其是左子结点，则加上 tree[j] 本身，然后j自减1。那么你可能有疑问，i是偶数，和j是奇数的情况就不用处理了么，当然不是，这两种情况都是要加父结点的，我们可以到下一轮去加，因为每一轮后，i和j都会除以2，那么i一定会有到奇数的一天，所以不用担心会有值丢失，一定会到某一个父结点上把值加上的 。
class NumArray {

    private int n;
    int[] tree;
    public NumArray(int[] nums) {
        n = nums.length;
        tree = new int[n*2];
        buildTree(nums);
    }
    private void buildTree(int[] nums){
        for(int i = n; i<n*2; i++){
            tree[i] = nums[i-n];
        }
        for(int i = n-1; i>0; i--){
            tree[i] = tree[i*2] + tree[i*2+1];
        }
    }
    
    public void update(int i, int val) {
        tree[i += n] = val;
        while(i>0){
            tree[i/2] = tree[i] + tree[i^1];
            i /= 2;
        }
    }
    
    public int sumRange(int i, int j) {
        int sum = 0;
        for(i += n, j += n; i<=j; i /= 2, j/=2){
            if((i&1) == 1) sum += tree[i++];
            if((j&1) == 0) sum += tree[j--];
        }
        return sum;
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(i,val);
 * int param_2 = obj.sumRange(i,j);
 */
(3) binary index tree
 树状数组Binary Indexed Tree，又称 Fenwick Tree，这是一种查询和修改复杂度均为 O(logn) 的数据结构。这个树状数组比较有意思，所有的奇数位置的数字和原数组对应位置的相同，偶数位置是原数组若干位置之和，假如原数组 A(a1, a2, a3, a4 ...)，和其对应的树状数组 C(c1, c2, c3, c4 ...)有如下关系：

C1 = A1
C2 = A1 + A2
C3 = A3
C4 = A1 + A2 + A3 + A4
C5 = A5
C6 = A5 + A6
C7 = A7
C8 = A1 + A2 + A3 + A4 + A5 + A6 + A7 + A8
...
那么是如何确定某个位置到底是有几个数组成的呢，原来是根据坐标的最低位 Low Bit 来决定的，所谓的最低位，就是二进制数的最右边的一个1开始，加上后面的0(如果有的话)组成的数字，例如1到8的最低位如下面所示：
坐标          二进制       最低位
1               0001          1
2               0010          2
3               0011          1
4               0100          4
5               0101          1
6               0110          2
7               0111          1
8               1000          8
...
最低位的计算方法有两种，一种是 x&(x^(x–1))，另一种是利用补码特性 x&-x。
这道题我们先根据给定输入数组建立一个树状数组 bit，比如，对于 nums = {1, 3, 5, 7, 9, 11, 13, 15, 17}，建立出的 bit 数组为：
bit -> 0 1 4 5 18 11 24 15 74
注意到我们给 bit 数组开头 padding 了一个0，这样我们在利用上面的树状数组的性质时就不用进行坐标转换了。可以发现bit数组中奇数位上的数字跟原数组是相同的，参见上面标记蓝色的数字。偶数位则是之前若干位之和，符合上图中的规律。
现在我们要更新某一位数字时，比如将数字5变成2，即 update(2, 2)，那么现求出差值 diff = 2 - 5 = -3，然后我们需要更新树状数组 bit，根据最低位的值来更新后面含有这一位数字的地方，一般只需要更新部分偶数位置的值即可。由于我们在开头 padding了个0，所以我们的起始位置要加1，即 j=3，然后现将 bit[3] 更新为2，然后更新下一位，根据图中所示，并不是 bit[3] 后的每一位都需要更新的，下一位需要更新的位置的计算方法为 j += (j&-j)，这里我们的j是3，则 (j&-j) = 1，所以下一位需要更新的是 bit[4]，更新为15，现在j是4，则 (j&-j) = 4，所以下一位需要更新的是 bit[8]，更新为71，具体的变换过程如下所示：
0 1 4 5 18 11 24 15 74
0 1 4 2 18 11 24 15 74
0 1 4 2 15 11 24 15 74
0 1 4 2 15 11 24 15 71
接下来就是求区域和了，直接求有些困难，我们需要稍稍转换下思路。比如若我们能求出前i-1个数字之和，跟前j个数字之和，那么二者的差值就是要求的区间和了。所以我们先实现求前任意i个数字之和，当然还是要利用树状数组的性质，此时正好跟 update 函数反过来，我们的j从位置i开始，每次将 bit[j] 累加到 sum，然后更新j，通过 j -= (j&-j)，这样就能快速的求出前i个数字之和了，从而也就能求出任意区间之和了。

class NumArray {

    private int[] data;
    private int[] bit;
    
    public NumArray(int[] nums) {
        data = new int[nums.length];
        bit = new int[nums.length + 1];
        for(int i = 0; i < nums.length; i++){
            update(i, nums[i]);
            
        }
    }
    
    public void update(int i, int val) {
        int diff = val - data[i];
        for(int j = i+1; j<bit.length; j += (j & -j)){
            bit[j] += diff;
        }
        data[i] = val;
    }
    
    public int sumRange(int i, int j) {
        return getSum(j+1) - getSum(i);
    }
    private int getSum(int i){
        int res = 0;
        for(int j = i; j>0; j -= (j & -j)){
            res += bit[j];
        }
        return res;
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(i,val);
 * int param_2 = obj.sumRange(i,j);
 */

308. Range Sum Query 2D - Mutable design
(1) binary index tree
class NumMatrix {

    private int[][] mat;
    private int[][] bit;
    
    public NumMatrix(int[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return;
        mat = new int[matrix.length + 1][matrix[0].length + 1];
        bit = new int[matrix.length + 1][matrix[0].length + 1];
        for(int i = 0; i<matrix.length; i++){
            for(int j = 0; j<matrix[0].length; j++){
                update(i, j, matrix[i][j]);
            }
        }
    }
    
    public void update(int row, int col, int val) {
        int diff = val - mat[row+1][col+1];
        for(int i = row + 1; i<mat.length; i += i & -i){
            for(int j = col + 1; j<mat[0].length; j += j & -j){
                bit[i][j] += diff;
            }
        }
        mat[row+1][col+1] = val;
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        return getSum(row2 + 1, col2 + 1) - getSum(row1, col2 + 1) - getSum(row2 + 1, col1) + getSum(row1, col1);
    }
    private int getSum(int row, int col){
        int res = 0;
        for(int i = row; i>0; i -= i & -i){
            for(int j = col; j>0; j -= j & -j){
                res += bit[i][j];
            }
        }
        return res;
    }
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * obj.update(row,col,val);
 * int param_2 = obj.sumRegion(row1,col1,row2,col2);
 */

(2) 列之和 column sum
利用了列之和，所谓列之和，就是(i, j)就是(0, j) + (1, j) + ... + (i, j) 之和，相当于把很多个一维的区间之和拼到了一起，那么我们在构造函数中需要建立起这样一个列之和矩阵，然后再更新某一个位置时，我们只需要将该列中改变的位置下面的所有数字更新一下即可，而在求某个区间和时，只要将相差的各列中对应的起始和结束的行上的值的差值累加起来即可
class NumMatrix {

    private int[][] mat;
    private int[][] colSum;
    public NumMatrix(int[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return;
        mat = matrix;
        colSum = new int[matrix.length+1][matrix[0].length];
        for(int i = 1; i< colSum.length; i++){
            for(int j = 0; j<colSum[0].length; j++){
                colSum[i][j] = colSum[i-1][j] + matrix[i-1][j];
            }
        }
    }
    
    public void update(int row, int col, int val) {
        for (int i = row + 1; i < colSum.length; i++) {
            colSum[i][col] += val - mat[row][col];
        }
        mat[row][col] = val;
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        int res = 0;
        for (int j = col1; j <= col2; j++) {
            res += colSum[row2 + 1][j] - colSum[row1][j];
        } 
        return res;
    }
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * obj.update(row,col,val);
 * int param_2 = obj.sumRegion(row1,col1,row2,col2);
 */

309. Best Time to Buy and Sell Stock with Cooldown
此题需要维护三个一维数组buy, sell，和rest。其中：
buy[i]表示此时买，此时的最大收益。
sell[i]表示此时卖，此时的最大收益。
rest[i]表示此时rest，此时的最大收益。
我们写出递推式为：
buy[i]  = max(rest[i-1] - price, buy[i-1]) 
sell[i] = max(buy[i-1] + price, sell[i-1])
rest[i] = max(sell[i-1], buy[i-1], rest[i-1])


上述递推式很好的表示了在买之前有冷冻期，买之前要卖掉之前的股票。一个小技巧是如何保证[buy, rest, buy]的情况不会出现，这是由于buy[i] <= rest[i]， 即rest[i] = max(sell[i-1], rest[i-1])，这保证了[buy, rest, buy]不会出现。
另外，由于冷冻期的存在，我们可以得出rest[i] = sell[i-1]，这样，我们可以将上面三个递推式精简到两个：
buy[i]  = max(sell[i-2] - price, buy[i-1]) 
sell[i] = max(buy[i-1] + price, sell[i-1])
 
我们还可以做进一步优化，由于i只依赖于i-1和i-2，所以我们可以在O(1)的空间复杂度完成算法
* Time complexity: O(n)
* Space complexity: O(1)
public int maxProfit(int[] prices) {
        int buy = Integer.MIN_VALUE;
        int preBuy = 0;
        int sell = 0;
        int preSell = 0;
        for(int price : prices){
            preBuy = buy;
            buy = Math.max(preSell - price, preBuy);
            preSell = sell;
            sell = Math.max(preBuy+price, preSell);
        }
        return sell;
    }

310. Minimum Height Trees
Hint: How many MHTs can a graph have at most? ans: 2
一个类似剥洋葱的方法，就是一层一层的褪去叶节点，最后剩下的一个或两个节点就是我们要求的最小高度树的根节点，这种思路非常的巧妙，而且实现起来也不难，跟之前那到课程清单的题一样，我们需要建立一个图g，是一个二维数组，其中g[i]是一个一维数组，保存了i节点可以到达的所有节点。我们开始将所有只有一个连接边的节点(叶节点)都存入到一个数组leaves中，然后我们遍历每一个叶节点，通过图来找到和其相连的节点，并且在其相连节点的集合中将该叶节点删去，如果删完后此节点也也变成一个叶节点了，加入队列中，再下一轮删除。那么我们删到什么时候呢，当节点数小于等于2时候停止，此时剩下的一个或两个节点就是我们要求的最小高度树的根节点。
class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        if(n == 1){
            return Collections.singletonList(0);
        }
        List<Integer> leaves = new ArrayList<>();
        List<Set<Integer>> adj = new ArrayList<>();
        for(int i = 0; i<n; i++){
            adj.add(new HashSet<>());
        }
        for(int[] edge : edges){
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        for(int i = 0; i<n; i++){
            if(adj.get(i).size() == 1){
                leaves.add(i);
            }
        }
        while(n>2){
            n -= leaves.size();
            List<Integer> newLeaves = new ArrayList();
            for(int i : leaves){
                int temp = adj.get(i).iterator().next();
                adj.get(temp).remove(i);
                if(adj.get(temp).size() == 1){
                    newLeaves.add(temp);
                }
            }
            leaves = newLeaves;
        }
        return leaves;
    }
}

311. Sparse Matrix Multiplication
a sparse matrix or sparse arrayis a matrix in which most of the elements are zero. By contrast, if most of the elements are nonzero, then the matrix is considered dense. 
稀疏矩阵的特点是矩阵中绝大多数的元素为0，而相乘的结果是还应该是稀疏矩阵，即还是大多数元素为0，那么我们使用传统的矩阵相乘的算法肯定会处理大量的0乘0的无用功，所以我们需要适当的优化算法，使其可以顺利通过OJ，我们知道一个 i x k 的矩阵A乘以一个 k x j 的矩阵B会得到一个 i x j 大小的矩阵C，那么我们来看结果矩阵中的某个元素C[i][j]是怎么来的，起始是A[i][0]*B[0][j] + A[i][1]*B[1][j] + ... + A[i][k]*B[k][j]，那么为了不重复计算0乘0，我们首先遍历A数组，要确保A[i][k]不为0，才继续计算，然后我们遍历B矩阵的第k行，如果B[K][J]不为0，我们累加结果矩阵res[i][j] += A[i][k] * B[k][j]; 这样我们就能高效的算出稀疏矩阵的乘法
* Time complexity: O(Am*An*Bn)
* Space complexity: O(Am*Bn)
class Solution {
    public int[][] multiply(int[][] A, int[][] B) {
        int[][] res = new int[A.length][B[0].length];
        for(int i = 0; i<A.length; i++){
            for(int k = 0; k<A[0].length; k++){
                if(A[i][k]!=0){
                    for(int j = 0; j<B[0].length; j++){
                        if(B[k][j] != 0){
                            res[i][j] += A[i][k] * B[k][j];
                        }
                    }
                }
            }
        }
        return res;
    }
}

312. Burst Balloons (dynamic programming)
(1) Solution approach 1, Top-Down dynamic programming recursion
https://leetcode.com/problems/burst-balloons/solution/
* Time complexity: O(n^3)
* Space complexity: O(n^2)
class Solution {
    public int maxCoins(int[] nums) {
        int n = nums.length + 2;
        int[] newNums = new int[n];
        newNums[0] = newNums[n-1] = 1;
        for(int i = 1; i<n-1; i++){
            newNums[i] = nums[i-1];
        }
        int[][] dp = new int[n][n];
        return helper(dp, newNums, 0, n-1);
    }
    private int helper(int[][] dp, int[] nums, int left, int right){
        if(left+1 == right) //no more balloons can be added
            return 0;
        if(dp[left][right] > 0)//already seen this
            return dp[left][right];
        //add each balloon
        int ans = 0;
        for(int i = left+1; i<right; i++){
            ans = Math.max(ans, nums[left] * nums[i] * nums[right]
                + helper(dp, nums, left, i) + helper(dp, nums, i, right));
        }
        dp[left][right] = ans;
        return ans;
    }
}

(2) Bottom-up
* Time complexity: O(n^3)
* Space complexity: O(n^2)
class Solution {
    public int maxCoins(int[] nums) {
        int n = nums.length + 2;
        int[] newNums = new int[n];
        newNums[0] = newNums[n-1] = 1;
        for(int i = 1; i<n-1; i++){
            newNums[i] = nums[i-1];
        }
        int[][] dp = new int[n][n];
        for(int left = n-2; left > -1; left--){
            for(int right = left+2; right < n; right++){
                for(int i = left+1; i < right; i++){
                    dp[left][right] = Math.max(dp[left][right], newNums[left] * newNums[i]*newNums[right] + dp[left][i] + dp[i][right]);
                }
            }
        }
        return dp[0][n-1];
    }
}
