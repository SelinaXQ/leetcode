8. Atoi string
edge cases need to consider:
white space
negative value
string with non-numerical character at back
string with non-numerical character at start
out of Integer range
if the string is empty, return 0
If no valid conversion could be performed, a zero value is returned.

After we clear all the white space, we deicide whether it is negative. 
Then we can use ASK code to turn char into number. we always need to judge if current char is a number by using if(str.charAt(i)<'0'||str.charAt(i)>'9') break; in the for loop.

* Time complexity: O(n) without white space
* Space complexity: O(1)
public int myAtoi(String str) {
        if(str == null || str.length() == 0) return 0;
        //int length = str.length();
        
        double result = 0;
        //remove white space
        str = str.trim();
        if(str == null || str.length() == 0) return 0;
        
        //negtive
        boolean isNegative = false;
        int startIndex = 0;
        if(str.charAt(0) == '-'){
            isNegative = true;
            startIndex++;
        }
        if(str.charAt(0) == '+'){
            startIndex++;
        }
        
        //normal case
        for(int i = startIndex; i<str.length(); i++){
            //non-numerical
            if(str.charAt(i)<'0'||str.charAt(i)>'9') break;
            int temp = (int)(str.charAt(i) - '0');
            result = result*10 + temp;
        }
        if(isNegative) result = -result;
        //out of range
        if(result>Integer.MAX_VALUE) return Integer.MAX_VALUE;
        if(result<Integer.MIN_VALUE) return Integer.MIN_VALUE;
        
        return (int)result;
        
    }

9. Palindrome number
edge case:
if the number is negative then it cannot be a palindrome number, since -121 -> 121- is definitely not palindrome.
(1) reverse the number and see whether it is equal to the original number(This method is faster when actually run)
* Time complexity: O(n)
* Space complexity: O(1)
public boolean isPalindrome(int x) {
        if(x<0) return false;
        if(x<10) return true;
        
        int reverse = 0;
        int xTemp = x;
        while(xTemp!=0){
            int temp = reverse*10 + xTemp%10;
            if(temp/10!=reverse) return false;
            reverse = temp;
            xTemp = xTemp/10;
        }
        if(x == reverse) return true;
        else return false;
        
    }
(2) turn number into string and use two pointers to check
* Time complexity:O(n) in worst case
* Space complexity: O(1)
public boolean isPalindrome(int x) {
        if(x<0) return false;
        if(x<10) return true;
        
        String str = String.valueOf(x);
        int start = 0;
        int end = str.length()-1;
        while(start<end){
            if(str.charAt(start)!=str.charAt(end)) return false;
            else{
                start++;
                end--;
            } 
        }
        return true;
    }


10. Regular expression matching dynamic programming
dynamic programming:  state  init function result
* Time complexity: O(m*n)
* Space complexity: O(m*n)
dp[i][j] -> s[0-i] match with s[0-j], i,j是字符数，不是index
init: 
dp[0][0] = true; 
dp[0][1-] = false;
dp[1-][0] = true, if p.charAt(i) == '*' && dp[0][i-1] = true
function:
Then, we can use two for loop to judge whether match or not.
* if s.charAt(i) == p.charAt(j) dp[i+1][j+1] = dp[i][j];
* if p.charAt(j) == ‘.’ dp[i+1][j+1] = dp[i][j];
* if p.charAt(j) == ‘*’, there are two conditions:
    * if(p.charAt(j-1)!=s.charAt(i) && p.charAt(j-1)!='.') dp[i+1][j+1] = dp[i+1][j-1];
    * else dp[i+1][j+1] = dp[i+1][j]||dp[i][j+1]||dp[i+1][j-1];
result:
return dp[s.length()][p.length];
public boolean isMatch(String s, String p) {
        if(s == null || p == null) return false;
        boolean[][] dp = new boolean[s.length()+1][p.length()+1];
        dp[0][0] = true;
        for(int i = 0; i<p.length(); i++){
            if(p.charAt(i) == '*' && dp[0][i-1]) dp[0][i+1] = true;//a* match ''
        }
        for(int i = 0; i<s.length(); i++){
            for(int j = 0; j<p.length(); j++){
                if(p.charAt(j) == s.charAt(i)) dp[i+1][j+1] = dp[i][j];
                if(p.charAt(j) == '.') dp[i+1][j+1] = dp[i][j];
                if(p.charAt(j) == '*'){
                    if(p.charAt(j-1)!=s.charAt(i) && p.charAt(j-1)!='.') dp[i+1][j+1] = dp[i+1][j-1];
                    else dp[i+1][j+1] = dp[i+1][j]||dp[i][j+1]||dp[i+1][j-1];
                }
                
            }
        }
        return dp[s.length()][p.length()];
    }
11. Container with most water two pointers
(1) use two pointers, start from two side of the array.
If the height is higher, it can contain more water. So we always move the shorter height pointer.
In order to compute area, we find out the shorter one of the two height and multiply with the width.
* Time complexity: O(n) in worst case
* Space complexity: O(1)
public int maxArea(int[] height) {
        //use two pointers
        int maxArea = 0;
        int left = 0;
        int right = height.length-1;
        while(left<right){
            int currentArea = Math.min(height[left], height[right])*(right-left);
            maxArea = Math.max(maxArea, currentArea);
            if(height[left]<height[right]) left++;
            else right--;
        }
        return maxArea;
    }
12. Integer to Roman
Use StringBuilder
* Time complexity: O(n) at most？？？？
* Space complexity: 2O(n)
List the number and romans with two arrays in descending order
start the begin of the numbers, check if the given number minus the number in array is larger than 0, if it is, 
append the number into StringBuilder.

public String intToRoman(int num) {
        int[] arabics = new int[]{1000,900,500,400,100,90,50,40,10,9,5,4,1};
        String[] romans = new String[]{"M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"};
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i<arabics.length; i++){
            while(num - arabics[i] >=0){
                sb.append(romans[i]);
                num = num-arabics[i];
            }
        }
        return sb.toString();
    }
13. Roman to Integer
Use HashMap, Start from the last roman character 
* Time complexity: O(n)
* Space complexity: O(1)
public int romanToInt(String s) {
        if(s==null||s.length() == 0) return 0;
        Map<Character, Integer> romanValues = new HashMap<>();
        romanValues.put('I',1);
        romanValues.put('V',5);
        romanValues.put('X',10);
        romanValues.put('L',50);
        romanValues.put('C',100);
        romanValues.put('D',500);
        romanValues.put('M',1000);
        
        int length = s.length();
        int result = romanValues.get(s.charAt(length-1));
        
        for(int i = length-2; i>=0; i--){
            if(romanValues.get(s.charAt(i)) >= romanValues.get(s.charAt(i+1))){
                result += romanValues.get(s.charAt(i));
            }else{
                result -= romanValues.get(s.charAt(i));
            }
        }
        return result;
    }

14. Longest common prefix
use for loop to check one by one.
* Time complexity: O(n*m) n:strs.length, m: string’s length
* Space complexity: O(1)
public String longestCommonPrefix(String[] strs) {
        if(strs.length == 0||strs == null) return "";
        String LCP = strs[0];
        for(int i = 1; i<strs.length; i++){
            String current = strs[i];
            int j = 0;
            while(j<LCP.length() && j<current.length() && LCP.charAt(j) == current.charAt(j)){
                j++;
            }
            if(j == 0) return "";
            Lcp = LCP.substring(0,j);
        }
        return LCP;
    }

15. 3Sum sort and two pointers
edge case: if the number can be used twice or three times.
Sort the array, iterate through list and use two pointers to find the target.
* Time complexity: O(n^2)
* Space complexity: O(n^2)
public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        for(int i = 0; i+2<nums.length; i++){
            if(i>0 && nums[i] == nums[i-1]) continue;
            int start = i+1;
            int end = nums.length-1;
            int target = -nums[i];
            while(start<end){
                if(nums[start] + nums[end] == target){
                    res.add(Arrays.asList(nums[start],nums[end],nums[i]));
                    start++;
                    end--;
                    while(start<end && nums[start] == nums[start-1]) start++;
                    while(start<end && nums[end] == nums[end+1]) end--;
                }else if(nums[start]+nums[end]<target){
                    start++;
                }else{
                    end--;
                }
                
                
            }
        }
        return res;
    }

16. 3Sum closest sort and two pointers
edge case:
If the length is less than 3 or the array is null, return -1?
Sort the array, iterate through list and use two pointers to find the closest target. Sum all the three numbers and compare the difference of this sum and target and difference of current closest and target.
* Time complexity: O(n^2)
* Space complexity: O(1)
public int threeSumClosest(int[] nums, int target) {
        if(nums == null || nums.length<3) return -1;
        Arrays.sort(nums);
        int closestSum = nums[0] + nums[1] + nums[2];
        for(int i = 0; i<nums.length-2; i++){
            int left = i+1;
            int right = nums.length - 1;
            while(left<right){
                int sum = nums[i] + nums[left] + nums[right];
                if(Math.abs(sum-target) < Math.abs(closestSum - target)){
                    closestSum = sum;
                }
                if(sum<target) left++;
                else right--;
            }
        }
        return closestSum;
    }
17. Letter combinations of a phone number recursion(backtracking) HashMap
edge case: if digit is null or is “”
the difference of ArrayList AND  LinkedList
First we need to check the edge case.
Then, we need to construct a letter map, the key is the numbers, and the value is char array related to that number.
In order to form one of the result, we need the help of StringBuilder and a helper function used recursively.
In the helper function, for every single number we retrieve, we append the char in the array to stringbuilder,
and call the helper function, then delete the new inserted character.
The stop condition is that the length of current string builder is equal to the length of the digits, and now we can add this string to result.
Finally, int the main function we return the result.
* Time complexity: O(3^N×4^M) where N is the number of digits in the input that maps to 3 letters (e.g. 2, 3, 4, 5, 6, 8) and M is the number of digits in the input that maps to 4 letters (e.g. 7, 9), and N+M is the total number digits in the input.
* Space complexity: O(3^N×4^M) since one has to keep 3^N *4^M solutions.
public List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<>();
        if(digits == null || digits.equals("")) return result;
        
        Map<Character, char[]> letterMap = new HashMap<>();
        letterMap.put('0',new char[]{});
        letterMap.put('1',new char[]{});
        letterMap.put('2', new char[]{'a','b','c'});
        letterMap.put('3', new char[]{'d','e','f'});
        letterMap.put('4', new char[]{'g','h','i'});
        letterMap.put('5', new char[]{'j','k','l'});
        letterMap.put('6', new char[]{'m','n','o'});
        letterMap.put('7', new char[]{'p','q','r','s'});
        letterMap.put('8', new char[]{'t','u','v'});
        letterMap.put('9', new char[]{'w','x','y','z'});
        
        StringBuilder sb = new StringBuilder();
        helper(digits, sb, letterMap, result);
        return result;
    }
    
    private void helper(String digits, StringBuilder sb, Map<Character, char[]> letterMap,List<String> result){
        if(sb.length() == digits.length()) {
            result.add(sb.toString());
            return;
        }
        for(char ch: letterMap.get(digits.charAt(sb.length()))){
            sb.append(ch);
            helper(digits, sb, letterMap, result);
            sb.deleteCharAt(sb.length()-1);
        }
    }

18. 4Sum
edge case: 
If the length of the array is null or is less than 4
whether we can use one number many times.

Sort the array first, actually pretty much the same as the 3Sum problem, use one more for loop(a nested for loop), iterate all combinations
and use another two pointers. Sum up all the 4 numbers and compare with the target. note that we need to always check if the current number is equal to
the former number we have used. If used, ++ or — to get the next number.
* Time complexity: O(n^3)
* Space complexity: O(n^2)
public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> result = new ArrayList<>();
        if(nums == null || nums.length < 4 ) return result;
        
        Arrays.sort(nums);
        for(int i = 0; i<nums.length - 3;i++){
            if(i!=0 && nums[i] == nums[i-1]) continue;
            for(int j = i+1; j<nums.length-2; j++){
                if(j!=i+1 && nums[j] == nums[j-1]) continue;
                
                int left = j+1;
                int right = nums.length-1;
                
                while(left<right){
                    int sum = nums[i]+nums[j]+nums[left]+nums[right];
                    
                    if(sum == target){
                        List<Integer> temp = new ArrayList<>();
                        result.add(Arrays.asList(nums[i],nums[j],nums[left],nums[right]));
                        left++;
                        right--;
                        while(left<right && nums[left] == nums[left-1]) left++;
                        while(left<right && nums[right] == nums[right+1]) right--;
                    }else if(sum<target){
                        left++;
                    }else{
                        right--;
                    }
                }
            }
        }
        return result;
    }
19. Remove Nth node from end of the list list
(1) two pass, we first use a while loop to find out the length of the list, then another loop to delete the node.
We also need a dummy node to avoid some edge case like the list is null, dummy.next = head;
* Time complexity: O(N) N is length of the list
* Space complexity: O(1)
public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(0);
        int length = 0;
        dummy.next = head;
        ListNode temp = head;
        while(temp!=null){
            length++;
            temp = temp.next;
        }
        length = length-n;
        temp = dummy;
        while(length>0){
            length--;
            temp = temp.next;
        }
        temp.next = temp.next.next;
        return dummy.next;
    }
(2) follow up: if we only want to solve this problem in one pass
Instead of using one pointer, we can use two pointers here, they both start from dummy node.
The first pointer advanced n+1 steps, the second pointer start at the dummy node, so this time the space between them is exactly n space.
We move both pointers until the first pointer arrive past the last node. And this time the second pointer will be pointing at the n+1th node counting from the last.
At this time, we can relink the next node of second node to the next next node.
* Time complexity: O(N) N is length of the list
* Space complexity: O(1)
public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode first = dummy;
        ListNode second = dummy;
        
        for(int i = 0; i<=n; i++){
            first = first.next;
        }
        while(first!=null){
            first = first.next;
            second = second.next;
        }
        second.next = second.next.next;
        return dummy.next;
        
    }
