128. Longest Consecutive Sequence
edge case: duplicate numbers. so we can use hashset
(1) HashSet
Use set’s set.contains() easy to find the number.
Use set to find the smallest number of a sequence, and set it as current number, keep adding 1 to it and see whether the number is in the set.
* Time complexity: O(n)
* Space complexity: O(n)
public int longestConsecutive(int[] nums) {
        Set<Integer> set = new HashSet<Integer>();
        for(int num: nums){
            set.add(num);
        }
        int longest = 0;
        for(int num: set){
            if(!set.contains(num-1)){//find the smallest number of one sequence
                int currNum = num;
                int currStreak = 1;
                while(set.contains(currNum+1)){
                    currNum += 1;
                    currStreak += 1;
                }
                longest = Math.max(longest, currStreak);
            }
        }
        return longest;
    }
(2)sort + for loop
* Time complexity: O(nlogn)
* Space complexity: O(1)
public int longestConsecutive(int[] nums) {
        if(nums == null|| nums.length == 0) return 0;
        Arrays.sort(nums);
        int longest = 1;
        int current = 1;
        //int num = nums[0];
        for(int i = 1; i<nums.length; i++){
            if(nums[i]!=nums[i-1]){ // here to remove duplicate number
                if(nums[i] == nums[i-1]+1){
                    current += 1;
                }else{
                    longest = Math.max(longest, current);
                    current = 1;
                }
            }
        }
        return Math.max(current, longest);
    }
(3) union find(disjoint set)
union find intro: https://www.youtube.com/watch?v=ibjEGG7ylHk
union find is a data structure that keeps track of elements which are split into one or more disjoint sets. It has two primary operations: find and union.
find: given an element, it would tell you what group this element belongs to
union: merge groups together
union find code with comment: https://github.com/williamfiset/data-structures/blob/master/com/williamfiset/datastructures/unionfind/UnionFind.java
solution from: https://leetcode.com/problems/longest-consecutive-sequence/discuss/41062/My-Java-Solution-using-UnionFound
* Time complexity: O(n)
* Space complexity: O(n)
public class Solution {
        public int longestConsecutive(int[] nums) {
            UF uf = new UF(nums.length);
            Map<Integer,Integer> map = new HashMap<Integer,Integer>(); // <value,index>
            for(int i=0; i<nums.length; i++){
                if(map.containsKey(nums[i])){
                    continue;
                }
                map.put(nums[i],i);
                if(map.containsKey(nums[i]+1)){//union nums[i]+1 with nums[i]
                    uf.union(i,map.get(nums[i]+1));
                }
                if(map.containsKey(nums[i]-1)){//union nums[i]-1 with nums[i]
                    uf.union(i,map.get(nums[i]-1));
                }
            }
            return uf.maxUnion();
        }
    }
    
    class UF{
        private int[] list;
        public UF(int n){
            list = new int[n];
            for(int i=0; i<n; i++){ //initialize nums and index
                list[i] = i;
            }
        }
        
        private int root(int i){ //decide the root
            while(i!=list[i]){
                list[i] = list[list[i]];
                i = list[i];
            }
            return i;
        }
        
        public boolean connected(int i, int j){
            return root(i) == root(j);
        }
        
        public void union(int p, int q){
          int i = root(p);
          int j = root(q);
          list[i] = j;
        }
        
        // returns the maxium size of union
        public int maxUnion(){ // O(n)
            int[] count = new int[list.length];
            int max = 0;
            for(int i=0; i<list.length; i++){
                count[root(i)] ++;
                max = Math.max(max, count[root(i)]);
            }
            return max;
        }
    }

129. Sum Root To Leaf Numbers dfs(recursion)
* Time complexity: O(n)
* Space complexity: O(n)
public int sumNumbers(TreeNode root) {
        if(root == null) return 0;
        return dfs(root, 0);
    }
    private int dfs(TreeNode root, int sum){
        if(root == null) return 0;
        if(root.left == null && root.right == null) return sum*10+root.val;
        return dfs(root.left, sum*10+root.val)+dfs(root.right, sum*10+root.val);
    }

130. Surrounded Region
* Time complexity: O(m*n)
* Space complexity: O(n)
(1) bfs
class Solution {
    int[] dirs = new int[]{0,1,0,-1,0};
    public void solve(char[][] board) {
        if(board == null || board.length == 0 || board[0].length == 0) return;
        int m = board.length;
        int n = board[0].length;
        Queue<int[]> queue = new LinkedList();
        //check first row and last row at the same time, put them into the queue to get ready for a BFS
        //to mark all those adjacent 'O' nodes to '+' as well
        for(int j = 0; j<n; j++){
            if(board[0][j] == 'O'){
                board[0][j] = '+';
                queue.offer(new int[]{0,j});
            }
            if(board[m-1][j] == 'O'){
                board[m-1][j] = '+';
                queue.offer(new int[] {m-1,j});
            }
        }
        //check first column and last column too
        for(int i = 0; i<m; i++){
            if(board[i][0] == 'O'){
                board[i][0] = '+';
                queue.offer(new int[] {i,0});
            }
            if(board[i][n-1] == 'O'){
                board[i][n-1] = '+';
                queue.offer(new int[] {i, n-1});
            }
        }
        while(!queue.isEmpty()){
            int[] curr = queue.poll();
            for(int i = 0; i<4; i++){//four directions
                int x = curr[0]+dirs[i];
                int y = curr[1]+dirs[i+1];
                if(x>=0 && x<m && y>0 && y<n && board[x][y] == 'O'){//边界是O，邻居中有O的话全都不变，保持O，即标记为+
                    board[x][y] = '+';
                    queue.offer(new int[]{x,y});
                }
            }
        }
        //now we can safely mark all other 'O' to 'X', also '+' back to 'O'
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(board[i][j] == 'O'){
                    board[i][j] = 'X';
                }else if(board[i][j] == '+'){
                    board[i][j] = 'O';
                }
            }
        }
    }
}
(2) dfs 
class Solution {
    public void solve(char[][] board) {
        if (board == null || board.length == 0 || board[0].length == 0)
            return;

        int m = board.length - 1;
        int n = board[0].length - 1;
        // key: find all the O's connecting to the O on four edges and set them as 1
        for (int i = 0; i <= m; i++) {
            if (board[i][0] == 'O') {
                dfs(board, i, 0);
            }
            if (board[i][n] == 'O') {
                dfs(board, i, n);
            }
        }
        for (int i = 0; i <= n; i++) {
            if (board[0][i] == 'O') {
                dfs(board, 0, i);
            }
            if (board[m][i] == 'O') {
                dfs(board, m, i);
            }
        }
        // replace O(surrounded by X) to X and 1(O not surrounded by X) to O
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if (board[i][j] == '1') {
                    board[i][j] = 'O';
                }
            }
        }
    }

    public void dfs(char[][] board, int i, int j) {
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != 'O')
            return;
        board[i][j] = '1';
        dfs(board, i - 1, j);
        dfs(board, i + 1, j);
        dfs(board, i, j - 1);
        dfs(board, i, j + 1);
    }
}

131. Palindrome Partitioning backtracking
* Time complexity: O(2^n) 选与不选
* Space complexity:O(n)
public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        if(s == null || s.length() == 0) return res;
        helper(res,s, new ArrayList<>());
        return res;
    }
    public void helper(List<List<String>> res, String s, List<String> list){
        if(s.length() == 0) {
            res.add(new ArrayList<>(list));
            return;
        }
        for(int i = 0; i<s.length(); i++){
            String temp = s.substring(0,i+1);
            if(isPalindrome(temp)){
                list.add(temp);
                helper(res, s.substring(i+1), list);
                list.remove(list.size()-1);
            }
        }
    }
    public boolean isPalindrome(String s){
        int low = 0, high = s.length()-1;
        while(low<high){
            if(s.charAt(low) == s.charAt(high)){
                low++;
                high--;
            }else return false;
        }
        return true;
    }
132. Palindrome Partitioning II
* Time complexity: O(n^2)
* Space complexity: O(n^2)
public int minCut(String s) {
        int n = s.length();
        char[] c = s.toCharArray();
        boolean[][] dp = new boolean[n][n]; // whether substring s[j-i] is palindrome
        int[] cut = new int[n];// how many cuts for substring s[0-i]
        for(int i = 0; i<n; i++){
            cut[i] = i;
            for(int j = 0; j<=i; j++){
                if(c[i] == c[j] && (j+1>i-1 || dp[j+1][i-1])){
                    dp[j][i] = true;
                    if(j == 0) cut[i] = 0;
                    else cut[i] = (cut[i]<cut[j-1]+1)?cut[i]:cut[j-1]+1;
                }
            }
        }
        return cut[n-1];
        
    }
