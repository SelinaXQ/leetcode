235. Lowest Common Ancestor of a Binary Search Tree
Using binary search tree’s property

(1) recursion
Algorithm
1. Start traversing the tree from the root node.
2. If both the nodes p and q are in the right subtree, then continue the search with right subtree starting step 1.
3. If both the nodes p and q are in the left subtree, then continue the search with left subtree starting step 1.
4. If both step 2 and step 3 are not true, this means we have found the node which is common to node p's and q's subtrees. and hence we return this common node as the LCA.
* Time complexity: O(n)
* Space complexity: O(n)
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(p.val > root.val && q.val > root.val){
            return lowestCommonAncestor(root.right, p, q);
        }else if(p.val < root.val && q.val < root.val){
            return lowestCommonAncestor(root.left, p, q);
        }else{
            return root;
        }     
    }

(2) Iteration
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        TreeNode curr = root;
        while(true){
            if(curr.val > p.val && curr.val > q.val){
                curr = curr.left;
            }else if(curr.val < p.val && curr.val < q.val){
                curr = curr.right;
            }else{
                break;
            }
        }
        return curr;
    }

236. Lowest Common Ancestor of a Binary Tree
The root that you can find both p and q is the answer
(1) recursion
* Time complexity: O(n)
* Space complexity: O(n)
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || root == p || root == q) return root;
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        
        if(left!=null && right!=null) 
            return root;
        else 
            return left == null? right : left;
    }

(2) Iteration
* Time complexity: O(n)
* Space complexity: O(n)
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        Map<TreeNode, TreeNode> parent = new HashMap<>(); //child-parent pair
        Queue<TreeNode> queue = new LinkedList<>();
        parent.put(root, null); //record parent
        queue.add(root);//queue for traversal
        while(!parent.containsKey(p) || !parent.containsKey(q)){
            TreeNode node = queue.poll();
            if(node.left!=null){
                parent.put(node.left, node);
                queue.add(node.left);
            }
            if(node.right!=null){
                parent.put(node.right, node);
                queue.add(node.right);
            }
        }
        Set<TreeNode> set = new HashSet<>();
        
        while(p!=null){
            set.add(p);
            p = parent.get(p);
        }
        //search common parent
        while(!set.contains(q)){
            q = parent.get(q);
        }
        return q;
    }

237. Delete Node in a Linked List
Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.
The usual way of deleting a node node from a linked list is to modify the nextpointer of the node before it, to point to the node after it.


Since we do not have access to the node before the one we want to delete, we cannot modify the next pointer of that node in any way. Instead, we have to replace the value of the node we want to delete with the value in the node after it, and then delete the node after it.


 

 

Because we know that the node we want to delete is not the tail of the list, we can guarantee that this approach is possible.
* Time complexity: O(1)
* Space complexity: O(1)
public void deleteNode(ListNode node) {
        node.val = node.next.val;
        node.next = node.next.next;
    }

238. Product Of Array Except Self
Note: Please solve it without division and in O(n).
(1) O(n) space
* Time complexity: O(n)
* Space complexity: O(1)
public int[] productExceptSelf(int[] nums) {
        int length = nums.length;
        int[] L = new int[nums.length];
        int[] R = new int[nums.length];
        int[] answer = new int[length];
        
        L[0] = 1;
        for(int i = 1; i<length; i++){
            L[i] = L[i-1]*nums[i-1];
        }
        R[length-1] = 1;
        for(int i = length-2; i>=0; i--){
            R[i] = R[i+1] * nums[i+1];
        }
        
        for(int i = 0; i<length; i++){
            answer[i] = L[i]*R[i];
        }
        return answer;
    }
(2) O(1) space
first round, res record the product to its left
second round, use parameter right to replace array R in (1), to record the product to its right
* Time complexity: O(n)
* Space complexity: O(1)
public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] res = new int[n];
        res[0] = 1;
        for(int i = 1; i<n; i++){
            res[i] = res[i-1]*nums[i-1];
        }
        int right = 1;
        for(int i = n-1; i>=0; i--){
            res[i] = res[i] * right; //(it’s left) * (it’s right)
            right = right*nums[i];
        }
        return res;
    }

239. Sliding Window Maximum sliding window
(1) bruto force
* Time complexity: O(n*k)
* Space complexity: O(n)
public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        if(n*k == 0) return new int[0];
        
        int[] res = new int[n-k+1];
        for(int i = 0; i<n-k+1; i++){
            int max = Integer.MIN_VALUE;
            for(int j = i; j<i+k; j++){
                max = Math.max(max, nums[j]);
            }
            res[i] = max;
        }
        return res;
    }

(2) Deque
use deque to record the index, remove elements out of window in the head, and remove the smaller elements in the tail which have no change to become max.
public int[] maxSlidingWindow(int[] nums, int k) {
        if(k>nums.length || k<0 || nums == null) return null;
        if(nums.length == 0 || k == 0) return new int[0];
        
        Deque<Integer> dq = new LinkedList<>(); //deque record index
        int[] res = new int[nums.length - k+1];
        int index = 0; //index is equal to the left side of the window
        
        for(int i=0; i<nums.length; i++){
            // remove elements out of window
            index = i-k+1;
            while(!dq.isEmpty() && dq.peek()<index){
                dq.poll();
            }
            // remove smaller elements, which have no change to become max
            while(!dq.isEmpty() && nums[dq.peekLast()]<nums[i]){
                dq.pollLast();
            }
            dq.offer(i);
            if(index>=0){
                res[index] = nums[dq.peek()];
            }
        }
        return res;
        
    }

240. Search a 2D Matrix II
solution: Approach 4: Search Space Reduction
* Time complexity: O(m+n)
* Space complexity: O(1)
public boolean searchMatrix(int[][] matrix, int target) {
        int row = matrix.length-1;
        int col = 0;
        while(row >=0  && col<matrix[0].length){
            if(matrix[row][col] == target) return true;
            else if(matrix[row][col]<target) col++;
            else row--;
        }
        return false;
    }

241. Different Ways To Add Parentheses Divide and Conquer, Recursion
edge case: single number
public List<Integer> diffWaysToCompute(String input) {
        List<Integer> res = new ArrayList<>();
        
        for(int i = 0; i < input.length(); i++){
            char ch = input.charAt(i);
            
            if(ch == '+' || ch == '-' || ch == '*'){
                String part1 = input.substring(0, i);
                String part2 = input.substring(i+1);
                
                List<Integer> resP1 = diffWaysToCompute(part1);
                List<Integer> resP2 = diffWaysToCompute(part2);
                
                for(Integer res1 : resP1){
                    for(Integer res2: resP2){
                        if(ch == '+') 
                            res.add(res1+res2);
                        else if(ch == '-') 
                            res.add(res1 - res2);
                        else 
                            res.add(res1 * res2);
                    }
                }
            }
        }
        if(res.size() == 0) 
            res.add(Integer.valueOf(input));//single number
        return res;
    }

242. Valid Anagram
public boolean isAnagram(String s, String t) {
        if(s.length() != t.length()) return false;
        int[] letter = new int[256];
        for(char c: s.toCharArray()){
            letter[c]++;
        }
        for(char c : t.toCharArray()){
            letter[c]--;
            if(letter[c] < 0) return false;
        }
        return true;
    }

243. Shorted Word Distance
(1) one pass
* Time complexity: O(n)
* Space complexity: O(1)
public int shortestDistance(String[] words, String word1, String word2) {
        int index1 = -1;
        int index2 = -1;
        int min = words.length;
        for(int i = 0; i<words.length; i++){
            if(words[i].equals(word1)) //equals， 不能用 ==
                index1 = i;
            else if(words[i].equals(word2)) 
                index2 = i;
            if(index1 != -1 && index2 != -1){
                min = Math.min(min, Math.abs(index1-index2));
            }
        }
        return min;
    }

244. Shortest Word Distance II design
Your method will be called repeatedly many times with different parameters. 
Cause the method may called repeatedly, we need a data structure to store those words
words may occur duplicate times
class WordDistance {

    private Map<String, List<Integer>> map;
    public WordDistance(String[] words) {
        map = new HashMap();
        int i = 0;
        for(String word: words){
            List<Integer> list = map.getOrDefault(word, new ArrayList<>());
            list.add(i);
            map.put(word, list);
            i++;
        }
    }
    
    public int shortest(String word1, String word2) {
        int dis = Integer.MAX_VALUE;
        for(int i : map.get(word1)){
            for(int j : map.get(word2)){
                int val = Math.abs(i-j);
                dis = Math.min(dis, val);
            }
        }
        return dis;
    }
}

/**
 * Your WordDistance object will be instantiated and called as such:
 * WordDistance obj = new WordDistance(words);
 * int param_1 = obj.shortest(word1,word2);
 */

245. Shortest Word Distance III (word1 might equals to word2)
* Time complexity: O(n)
* Space complexity: O(1)
public int shortestWordDistance(String[] words, String word1, String word2) {
        int index1 = -1;
        int index2 = -1;
        int res = words.length;
        if(word1.equals(word2)){
            for(int i = 0; i<words.length; i++){
                if(words[i].equals(word1)){
                    index1 = index2;
                    index2 = i;
                    if(index1 != -1 && index2 != -1){
                        res = Math.min(res, Math.abs(index1 - index2));
                    }
                }
            }
        }else{
            for(int i = 0; i<words.length; i++){
                if(words[i].equals(word1)){
                    index1 = i;
                }else if(words[i].equals(word2)){
                    index2 = i;
                }
                if(index1 != -1 && index2 != -1){
                    res = Math.min(res, Math.abs(index1 - index2));
                }
            }
        }
        return res;
    }
