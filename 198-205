198. House Robber
(1) dynamic programming
* Time complexity: O(n)
* Space complexity: O(n)
public int rob(int[] nums) {
        if(nums.length == 0|| nums == null) return 0;
        if(nums.length == 1) return nums[0];
        if(nums.length == 2) return Math.max(nums[0], nums[1]);
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        for(int i = 2; i<nums.length; i++){
            dp[i] = Math.max(dp[i-2]+nums[i], dp[i-1]);
        }
        return dp[nums.length-1];
    }
(2) linear
* Time complexity: O(n)
* Space complexity: O(1)
public int rob(int[] nums) {
        int prevNo = 0;
        int prevYes = 0;
        for(int i = 0; i<nums.length; i++){
            int temp = prevNo;
            prevNo = Math.max(prevNo, prevYes);
            prevYes = nums[i]+temp;
        }
        return Math.max(prevNo, prevYes);
    }

199. Binary Tree Right Side View bfs, dfs
(1) bfs Queue
* Time complexity: O(n)
* Space complexity: O(n)
public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new ArrayList();
        if(root == null) return res;
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0;i<size; i++){
                TreeNode curr = q.poll();
                if(i == size-1) res.add(curr.val);
                if(curr.left!=null) q.offer(curr.left);
                if(curr.right!=null) q.offer(curr.right);
            }
        }
        return res;
    }
(2) recursion
* Time complexity: O(n)
* Space complexity: O(n)
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new ArrayList();
        if(root == null) return res;
        helper(res, root, 0);
        return res;
    }
    private void helper(List<Integer> res, TreeNode root, int level){
        if(root == null) return;
        if(res.size() == level) res.add(root.val);//every time add right side of the node value
        helper(res, root.right, level+1);//right first
        helper(res, root.left, level+1);
    }
}

200. Number of Islands
Linear scan the 2d grid map, if a node contains a '1', then it is a root node that triggers a Depth First Search. During DFS, every visited node should be set as '0' to mark as visited node. Count the number of root nodes that trigger DFS, this number would be the number of islands since each DFS starting at some root identifies an island.
* Time complexity: O(m*n)
* Space complexity: O(m*n)
(1) bfs
public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0) return 0;
        int count = 0;
        int row = grid.length;
        int col = grid[0].length;
        for(int i = 0; i<row; i++){
            for(int j = 0; j<col; j++){
                if(grid[i][j] == '1'){
                    count++;
                    dfs(grid, i, j, row, col);
                }
            }
        }
        return count;
    }
    private void dfs(char[][] grid, int i, int j, int row, int col){
        if(i<0||i>=row||j<0||j>=col||grid[i][j] == '0') return;
        grid[i][j] = '0';
        dfs(grid, i+1, j, row, col);
        dfs(grid, i, j+1, row, col);
        dfs(grid, i-1, j, row, col);
        dfs(grid, i, j-1, row, col);
    }
(2) bfs
public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0) return 0;
        int count = 0;
        int row = grid.length;
        int col = grid[0].length;
        for(int i = 0; i<row; i++){
            for(int j = 0; j<col; j++){
                if(grid[i][j] == '1'){
                    bfs(grid, i, j, row, col);
                    count++;
                }
            }
        }
        return count;
    }
    private void bfs(char[][] grid, int x, int y, int row, int col){
        grid[x][y] = '0';
        Queue<Integer> queue = new LinkedList<>();
        int code = x * row + y;
        queue.offer(code);
        while (!queue.isEmpty()) {
            code = queue.poll();
            int i = code / row;
            int j = code % row;
            if (i > 0 && grid[i - 1][j] == '1') {
                queue.offer((i - 1) * row + j);
                grid[i - 1][j] = '0';
            }
            if (i < row - 1 && grid[i + 1][j] == '1') {
                queue.offer((i + 1) * row + j);
                grid[i + 1][j] = '0';
            }
            if (j > 0 && grid[i][j - 1] == '1') {
                queue.offer((i * row) + j - 1);
                grid[i][j - 1] = '0';
            }
            if (j < col - 1 && grid[i][j + 1] == '1') {
                queue.offer((i * row) + j + 1);
                grid[i][j + 1] = '0';
            }
        }
    }

version accepted???
class Solution {
  public int numIslands(char[][] grid) {
    if (grid == null || grid.length == 0) {
      return 0;
    }

    int nr = grid.length;
    int nc = grid[0].length;
    int num_islands = 0;

    for (int r = 0; r < nr; ++r) {
      for (int c = 0; c < nc; ++c) {
        if (grid[r][c] == '1') {
          ++num_islands;
          grid[r][c] = '0'; // mark as visited
          Queue<Integer> neighbors = new LinkedList<>();
          neighbors.add(r * nc + c);
          while (!neighbors.isEmpty()) {
            int id = neighbors.remove();
            int row = id / nc;
            int col = id % nc;
            if (row - 1 >= 0 && grid[row-1][col] == '1') {
              neighbors.add((row-1) * nc + col);
              grid[row-1][col] = '0';
            }
            if (row + 1 < nr && grid[row+1][col] == '1') {
              neighbors.add((row+1) * nc + col);
              grid[row+1][col] = '0';
            }
            if (col - 1 >= 0 && grid[row][col-1] == '1') {
              neighbors.add(row * nc + col-1);
              grid[row][col-1] = '0';
            }
            if (col + 1 < nc && grid[row][col+1] == '1') {
              neighbors.add(row * nc + col+1);
              grid[row][col+1] = '0';
            }
          }
        }
      }
    }

    return num_islands;
  }
}
(3) union find 

class Solution {
        int[][] distance = {{1,0},{-1,0},{0,1},{0,-1}};
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0||grid[0].length == 0) return 0;
        UnionFind uf = new UnionFind(grid);
        int rows = grid.length;
        int cols = grid[0].length;
        for(int i = 0; i<rows; i++){
            for(int j = 0; j<cols; j++){
                if(grid[i][j] == '1'){
                    for(int[] d:distance){
                        int x = i+d[0];
                        int y = j+d[1];
                        if(x >= 0 && x < rows && y >= 0 && y < cols && grid[x][y] == '1'){
                            int id1 = i*cols+j;
                            int id2 = x*cols+y;
                            uf.union(id1, id2);
                        }
                    }
                }
            }
        }
        return uf.count;
    }
}

class UnionFind{
    int[] father;
    int m,n;
    int count = 0;
    UnionFind(char[][] grid){
        m = grid.length;
        n = grid[0].length;
        father = new int[m*n];
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(grid[i][j] == '1'){
                    int id = i*n+j;
                    father[id] = id;
                    count++;
                } 
            }
        }
    }
    public void union(int node1, int node2){
        int find1 = find(node1);
        int find2 = find(node2);
        if(find1!=find2){
            father[find1] = find2;
            count--;
        }
    }
    public int find(int node){
        if(father[node] == node) return node;
        father[node] = find(father[node]);
        return father[node];
    }
}

201. Bitwise AND of Numbers Range bit manipulation
https://www.cnblogs.com/grandyang/p/4431646.html
n&(n-1) 每次去掉最低位的1
* Time complexity: O(n-m)
* Space complexity: O(1)
public int rangeBitwiseAnd(int m, int n) {
        while(n>m){
            n &= (n-1);
        }
        return n;
    }
(2) check every bit
直接平移m和n，每次向右移一位，直到m和n相等，记录下所有平移的次数i，然后再把m左移i位即为最终结果
m: 11010
n:  11100
i = 0
右移一位
m: 1101
n:  1110
i = 1;
再右移一位：
m: 110
n:  111
i = 2;
再右移一位：
m: 11
n:  11
i = 3;
m左移三位
11000

public int rangeBitwiseAnd(int m, int n) {
        int i = 0;
        while(m!=n){
            m >>= 1;
            n >>= 1;
            ++i;
        }
        return (m<<i);
    }

202. Happy Number
A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

(1) recursion
Use HashSet to record whether there is a loop.

class Solution {
    public boolean isHappy(int n) {
        Set<Integer> set = new HashSet<Integer>();
        set.add(n);
        return helper(n, set);
    }
    private boolean helper(int n, Set<Integer> set){
        if(n==1) return true;
        int sum = 0; 
        while(n>0){
            sum += (n%10)*(n%10);
            n = n/10;
        }
        if(set.contains(sum)) return false;
        set.add(sum);
        return helper(sum, set);
    }
}

203. Remove Linked List Elements linked list
* Time complexity: O(n)
* Space complexity: O(1)
public ListNode removeElements(ListNode head, int val) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode curr = dummy;
        while(curr!=null){
            while(curr.next!=null && curr.next.val!=val) curr = curr.next;
            if(curr.next == null) break;
            
            while(curr.next.next!=null && curr.next.val == curr.next.next.val)// adjacent val
                curr.next = curr.next.next;
            
            curr.next = curr.next.next;
        }
        return dummy.next;
    }

204. Count Primes
ignore 0 and 1, start from 2, and set 2*2, 2*2+2, 2*2+2+2 …..  as not prime, same for 3 and every prime number already know.
* Time complexity: O(nsqrt(n))
* Space complexity: O(n)
public int countPrimes(int n) {
        boolean[] isPrime = new boolean[n+1];
        for(int i = 0; i < n; i++) {
            isPrime[i] = true;
        }
        int count = 0;
        for (int i = 2; i*i < n; i++) {
            if (isPrime[i]) {
                for(int j = i*i; j < n; j+=i) {
                    isPrime[j] = false;
                }
            }
        }
        for (int i = 2; i < n; i++) {
            if (isPrime[i]) {
                count++;
            }
        }
        return count;
    }

205. Isomorphic Strings 同构
Two strings are isomorphic if the characters in s can be replaced to get t.


这道题让我们求同构字符串，就是说原字符串中的每个字符可由另外一个字符替代，可以被其本身替代，相同的字符一定要被同一个字符替代，且一个字符不能被多个字符替代，即不能出现一对多的映射。根据一对一映射的特点，我们需要用两个哈希表分别来记录原字符串和目标字符串中字符出现情况，由于ASCII码只有256个字符，所以我们可以用一个256大小的数组来代替哈希表，并初始化为0，我们遍历原字符串，分别从源字符串和目标字符串取出一个字符，然后分别在两个哈希表中查找其值，若不相等，则返回false，若相等，将其值更新为i + 1，因为默认的值是0，所以我们更新值为i + 1，这样当 i=0 时，则映射为1，如果不加1的话，那么就无法区分是否更新了

example:
012
egg

012
add
1st:
m[e] == n[a]
m[e] = 0 -> 0+1=1
n[a] = 0 -> 0+1=1
2nd:
m[g] == n[d]
m[g] = 0 -> 1+1=2
n[d] = 0 -> 1+1 = 2
3rd:
m[g] == n[d]
m[g] = 2 -> 2+1 = 3
n[d] = 2 -> 2+1 = 3
就是检查已经出现过的字符重复出现时， 另一个字符是否也重复出现
* Time complexity: O(n)
* Space complexity: O(1)
public boolean isIsomorphic(String s, String t) {
        int[] m = new int[256];
        int[] n = new int[256];
        for(int i = 0; i<s.length(); i++){
            if(m[s.charAt(i)] != n[t.charAt(i)]) return false;
            m[s.charAt(i)] = i+1;
            n[t.charAt(i)] = i+1;
        }
        return true;
    }


 

