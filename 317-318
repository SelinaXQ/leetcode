317. Shortest Distance From All Buildings bfs
similar problem: best meeting points, walls and gates
这道题用DFS就会很麻烦，因为我们的目标是要建立Distance Map，所以BFS的特性使得其非常适合建立距离场，而DFS由于是沿着一个方向一股脑的搜索，然后会面临着更新距离的问题，只有当递归函数都调用结束后，距离场才建立好，那么我们累加距离场时又得整个遍历一遍，非常不高效。主要原因还是由于DFS的搜索方式不适合距离场，因为BFS遍历完一个点后，不会再来更改这个点的值，而DFS会反复的更改同一个点的值，bfs还是需要借助queue来遍历，我们对于每一个建筑的位置都进行一次全图的BFS遍历，每次都建立一个dist的距离场，由于我们BFS遍历需要标记应经访问过的位置，而我们并不想建立一个visit的二维矩阵，那么怎么办呢，这里用一个小trick，我们第一遍历的时候，都是找0的位置，遍历完后，我们将其赋为-1，这样下一轮遍历我们就找-1的位置，然后将其都赋为-2，以此类推直至遍历完所有的建筑物，然后在遍历的过程中更新dist和sum的值，注意我们的dist算是个局部变量，每次都初始化为一个新的矩阵，真正的距离场累加在sum中，由于建筑的位置在grid中是1，所以dist中初始化是0，可以直接累加到sum中，我们用sum中的值来更新结果res的值，最后根据res的值看是否要返回-1.
java中直接数组相等存在一个变另一个也变的问题
* Time complexity: O(m*n*m*n)
* Space complexity: O(n)
class Solution {
    public int shortestDistance(int[][] grid) {
        int res = Integer.MAX_VALUE;
        int val = 0;
        int m = grid.length;
        int n = grid[0].length;
        int[][] sum = new int[m][n];
        int[][] dirs = new int[][]{{0, -1}, {-1, 0}, {0, 1}, {1, 0}};
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(grid[i][j] == 1){//building
                    res = Integer.MAX_VALUE;
                    int[][] dist = new int[m][n];
                    Queue<int[]> q = new LinkedList();
                    q.offer(new int[]{i,j});
                    while(!q.isEmpty()){
                        int[] cur = q.poll();
                        int a = cur[0];
                        //System.out.println("a:" + a);
                        int b = cur[1];
                        for(int k = 0; k<dirs.length; k++){
                            int x = a + dirs[k][0];
                            int y = b + dirs[k][1];
                            if(x>=0 && x<m && y>=0 && y<n && grid[x][y] == val){//不是1也不是2，可以走
                                grid[x][y]--; //0->-1
                                dist[x][y] = dist[a][b]+1;//更新距离, ex: 0->1
                                sum[x][y] += dist[x][y];//第一个building 0->1
                                q.offer(new int[]{x,y});//可以走push进去
                                res = Math.min(res, sum[x][y]);
                            }
                        }
                    }
                    val--;
                }
            }
        }
        return res == Integer.MAX_VALUE ? -1 : res;
    }
}

318. Maximum Product Of Word Length bit manipulation
using mask (bit) to represent word.
如果相与and为0 说明没有重复字母
* Time complexity: O(n^2)
* Space complexity: O(n)
class Solution {
    public int maxProduct(String[] words) {
        int res = 0;
        int n = words.length;
        int[] mask = new int[n];
        for(int i = 0; i<words.length; i++){
            for(int j = 0; j<words[i].length(); j++){
                mask[i] |= 1 << (words[i].charAt(j)-'a’);
// use 32-bit int to represent word
// a: 00..001, b: 00...010, c: 00...100...
            }
            for(int k = 0; k<i; k++){
                if((mask[k] & mask[i]) == 0){
                    res = Math.max(res, words[i].length() * words[k].length());
                }
            }
        }
        return res;
    }
}
