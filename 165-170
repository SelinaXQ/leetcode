165. Compare Version Number
* Time complexity: O(n)
* Space complexity: O(n)
Use split to split numbers first. Then find the longest length. 
Compare the number one by one.
For the version has the longest length, if it’s last few number has a number larger than 0, it is the larger version,
return corresponding number.

public int compareVersion(String version1, String version2) {
        // 。、|*等转义字符，必须加\\
        String[] str1 = version1.split("\\.");
        String[] str2 = version2.split("\\.");
        int len = (str1.length<str2.length)?str2.length:str1.length;//find the longest length
        for(int i = 0; i<len; i++){
            if(str1.length == i){
                while(i<len){
                    //str1[i] is null, so if str2[i]>0, version1<version2
                    if(Integer.parseInt(str2[i])>0) return -1;
                    i++;
                }
            }else if(str2.length == i){
                while(i<len){
                    if(Integer.parseInt(str1[i])>0) return 1;
                    i++;
                }
            }else{
                if(Integer.parseInt(str1[i]) > Integer.parseInt(str2[i])) return 1;
                else if(Integer.parseInt(str2[i])> Integer.parseInt(str1[i])) return -1;
            }
        }
        return 0;
    }
166. Fraction to Recurring Decimal
edge case: numerator is 0 and negative number
the key point is the remainder, every time you get the remainder, you need to multiply 10 and divide divisor.
Use map to see if the remainder has appeared. (store remainder and stringbuilder’s length)
* Time complexity: O(n)
* Space complexity: O(n)
public String fractionToDecimal(int numerator, int denominator) {
        if(numerator == 0) return "0";
        StringBuilder fraction = new StringBuilder();
        //if either one is negative
        if(numerator<0 ^ denominator<0) fraction.append("-");
        
        //convert to Long or else abs(-MIN_VALUE(-2147483648)) OVERFLOW
        long dividend = Math.abs(Long.valueOf(numerator));
        long divisor = Math.abs(Long.valueOf(denominator));
        fraction.append(String.valueOf(dividend/divisor));
        
        long remainder = dividend % divisor;
        if(remainder == 0) return fraction.toString();
        
        fraction.append(".");
        Map<Long, Integer> map = new HashMap();
        while(remainder!=0){
            if(map.containsKey(remainder)){
                fraction.insert(map.get(remainder), "(");
                fraction.append(")");
                break;
            }
            map.put(remainder, fraction.length());
            remainder *= 10; 
            //1/2->0, remiander -> 1, 1*10 = 10, 10/2 = 5
            //append 0 . 5
            fraction.append(String.valueOf(remainder/divisor));
            remainder %= divisor;
        }
        return fraction.toString();
    }

167. Two Sum II - Input array is sorted
cannot use one element twice
Use two pointers.
If there is no such solution, return what? null
* Time complexity: O(n)
* Space complexity: O(1)
public int[] twoSum(int[] numbers, int target) {
        if(numbers == null || numbers.length == 0) return null;
        int low = 0; int high = numbers.length-1;
        while(low<high){
            int sum = numbers[low]+numbers[high];
            if(sum == target){
                return new int[] {low+1, high+1};
            }else if(sum < target) low++;
            else high--;
        }
        return null;
    }

168. Excel Sheet Column Title
 //Get the right most digit first, move to the left
 //e.g. when n = 28, we get 'B' first, then we get ‘A'
note to n— everytime compute
* Time complexity: O(n) ??
* Space complexity: O(1)
public String convertToTitle(int n) {
        StringBuilder sb = new StringBuilder();
        while(n>0){
            n--;
            sb.append((char)(n%26+'A'));
            n = n/26;
        }
        return sb.reverse().toString();
    }

169. Majority Element
appears more than ⌊ n/2 ⌋ times.
The n/2 is very important in this problem.
(1) sorting
* Time complexity: O(logn)
* Space complexity: O(1)
public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
(2) hashmap
Use a res and max to maintain the result and max . So we don’t need to iterate map later.
* Time complexity: O(n)
* Space complexity: O(n)
public int majorityElement(int[] nums) {
        Map<Integer, Integer> map = new HashMap();
        int res = 0;
        int max = 0;
        for(int num : nums){
            if(map.getOrDefault(num, 0) >= max){
                res = num;
                max = map.getOrDefault(num,0)+1;
            }
            map.put(num, map.getOrDefault(num,0)+1);
        }
        return res;
    }
(3) Boyer-Moore Voting Algorithm
* Time complexity: O(n)
* Space complexity: O(1)
public int majorityElement(int[] nums) {
        int count = 0;
        int res = 0;
        for(int num: nums){
            if(count == 0) res = num;
            if(num!=res) count--;
            else count++;
        }
        return res;
    }

170. Two Sum III - Data structure design design HashMap
Use hashmap

class TwoSum {
    private Map<Integer, Integer> map;
    /** Initialize your data structure here. */
    public TwoSum() {
        map = new HashMap();
    }
    
    /** Add the number to an internal data structure.. */
    public void add(int number) {
        map.put(number, map.getOrDefault(number, 0) +1);
    }
    
    /** Find if there exists any pair of numbers which sum is equal to the value. */
    public boolean find(int value) {
       for(Integer key: map.keySet()){
            if(value - key != key) {
                if(map.containsKey(value - key)) return true;
            } else {
                if(map.get(key) >= 2) return true;
            }
        }
        return false;
    }
}

/**
 * Your TwoSum object will be instantiated and called as such:
 * TwoSum obj = new TwoSum();
 * obj.add(number);
 * boolean param_2 = obj.find(value);
 */
