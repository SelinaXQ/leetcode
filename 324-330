324. Wiggle Sort II
(1) sort
* Time complexity: O(nlogn)
* Space complexity: O(n)
class Solution {
    public void wiggleSort(int[] nums) {
        if(nums.length <= 1)
            return;
        int[] val = Arrays.copyOf(nums, nums.length);
        Arrays.sort(val);
        int idx = val.length - 1;
        for(int i = 1; i < nums.length; i+=2){
            nums[i] = val[idx--];
        }
        for(int i = 0; i < nums.length; i+=2){
            nums[i] = val[idx--];
        }
    }
}
 
follow up:
in O(n) time

325. Maximum Size Subarray Sum Equals k
用一个sum值记录从开始到现在的总和， 在map里放每次sum值和index. 因为map里的key不能重复，
这样就可以避免有相同sum的情况，因为总是记录的第一个sum出现时的index可以保证最长。
like:
nums: [1, 0, -1], k = -1
sums: [1, 1, 0]
当所有sum值没有满足要求的时候，可以通过取中间段的方式得到结果，sum-(sum-k) = k的形式，这也是为何要用hashmap存sum的原因，
like:
nums: [-2, -1, 2, 1], k = 1
sums: [-2, -3, -1, 0]
* Time complexity: O(n)
* Space complexity: O(n)
class Solution {
    public int maxSubArrayLen(int[] nums, int k) {
        if(nums.length == 0 || nums == null)
            return 0;
        HashMap<Integer, Integer> map = new HashMap<>();//sum - index
        int sum = 0;
        int max = 0;
        for(int i = 0; i<nums.length; i++){
            sum += nums[i];
            if(sum == k){
                max = i+1;
            }else if(map.containsKey(sum - k)){// sum - (sum - k) = k
                max = Math.max(max, i - map.get(sum-k));
            }
            if(!map.containsKey(sum)){
                map.put(sum, i);
            }
        }
        return max;
    }
}

325. Power Of Three
similar question: Power Of Two 2的power值最高位都是1， 其余都是0， 通过bit manipulation的方法来数1的个数就可以判断了
https://www.cnblogs.com/grandyang/p/4623394.html

edge case: 0
(1) bruto force
while 循环里判断了n是否为0，没有这个条件的话， 0值会TLE
* Time complexity: O(log3n)
* Space complexity: O(1)
class Solution {
    public boolean isPowerOfThree(int n) {
        while(n != 0 && n % 3 == 0){
            n /= 3;
        }
        return n == 1;
    }
}
follow up: without loop or recursion
(2) 换底公式 math
logab = logcb / logca，那么如果n是3的倍数，则log3n一定是整数，我们利用换底公式可以写为log3n = log10n / log103。 现在问题就变成了判断log10n / log103是否为整数。
n is a power of three if and only if i is an integer. In Java, we check if a number is an integer by taking the decimal part (using % 1) and checking if it is 0.
* Time complexity: O(unknown)
* Space complexity: O(1)
class Solution {
    public boolean isPowerOfThree(int n) {
        return (Math.log10(n) / Math.log10(3)) % 1 == 0;
    }
}

326. Count of Range Sum hard
(1) bruto force
* Time complexity: O(n^2)
* Space complexity: O(n)
class Solution {
    public int countRangeSum(int[] nums, int lower, int upper) {
        int n = nums.length;
        if(n <= 0)
            return 0;
        long sum[] = new long[n];
        sum[0] = nums[0];
        for(int i = 1; i<n; i++){
            sum[i] = sum[i-1] + nums[i];
        }
        int count = 0;
        for(int i = 0; i<n; i++){
            for(int j = i; j<n; j++){
                long num = sum[j] - sum[i] + nums[i];
                if(num >= lower && num <= upper)
                    count++;
            }
        }
        return count;
    }
}

(2) binary search and merge 23%
* Time complexity: O(nlogn)
* Space complexity: O(n)
class Solution {
    long[] sum;
    int lower;
    int upper;
    public int countRangeSum(int[] nums, int lower, int upper) {
        int n = nums.length;
        this.lower = lower;
        this.upper = upper;
        if(n <= 0)
            return 0;
        sum = new long[n];
        sum[0] = nums[0];
        for(int i = 1; i<n; i++){
            sum[i] = sum[i-1] + nums[i];
        }
        return countNum(nums, 0, n-1);
    }
    private int countNum(int[] nums, int left, int right){
        if(left == right){
            if(nums[left] >= lower && nums[right] <= upper){
                return 1;
            }
            return 0;
        }
        int mid = (left+right)/2;
        int total = 0;
        for(int i = left; i<=mid; i++){
            for(int j = mid+1; j<=right; j++){
                long tmpNum = sum[j] - sum[i] + nums[i];
                if(tmpNum >= lower && tmpNum <= upper){
                    total++;
                }
            }
        }
        //二分法
        return total + countNum(nums, left, mid) + countNum(nums, mid+1, right);
    }
}

328. Odd Even Linked List
two pointers
我们可以使用两个指针来做，pre指向奇节点，cur指向偶节点，然后把偶节点cur后面的那个奇节点提前到pre的后面，然后pre和cur各自前进一步，此时cur又指向偶节点，pre指向当前奇节点的末尾，以此类推直至把所有的偶节点都提前了即可
example:
pre cur
1     2    3    4    5

pre         cur
1      3     2    4    5

       pre            cur
1      3       2      4     5 
* Time complexity: O(n)
* Space complexity: O(1)
 public ListNode oddEvenList(ListNode head) {
        
        if(head == null || head.next == null)
            return head;
        ListNode pre = head;
        ListNode cur = head.next;
        while(cur!=null && cur.next!=null){
            ListNode temp = pre.next;
            pre.next = cur.next;
            cur.next = cur.next.next;
            pre.next.next = temp;
            cur = cur.next;
            pre = pre.next;
        }
        return head;
    }

329. Longest Increasing Path in a Matrix
(1) dynamic programming + dfs
* Time complexity: O(m*n)
* Space complexity: O(m*n)
我们需要维护一个二维动态数组dp，其中dp[i][j]表示数组中以(i,j)为起点的最长递增路径的长度，初始将dp数组都赋为0，当我们用递归调用时，遇到某个位置(x, y), 如果dp[x][y]不为0的话，我们直接返回dp[x][y]即可，不需要重复计算。我们需要以数组中每个位置都为起点调用递归来做，比较找出最大值。在以一个位置为起点用DFS搜索时，对其四个相邻位置进行判断，如果相邻位置的值大于上一个位置，则对相邻位置继续调用递归，并更新一个最大值，搜素完成后返回即可
class Solution {
    int[][] dirs = {{0, 1}, {1,0}, {0, -1}, {-1, 0}};
    public int longestIncreasingPath(int[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return 0;
        int res = 1;
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                res = Math.max(res, dfs(matrix, dp, i, j));
            }
        }
        return res;
    }
    private int dfs(int[][] matrix, int[][] dp, int i, int j){
        if(dp[i][j]!=0)
            return dp[i][j];
        int res = 1;
        int m = matrix.length;
        int n = matrix[0].length;
        for(int[] dir: dirs){
            int x = i + dir[0];
            int y = j + dir[1];
            if(x<0 || x>=m || y<0 || y>=n || matrix[x][y]<=matrix[i][j])
                continue;
            int len = 1 + dfs(matrix, dp, x, y);
            res = Math.max(res, len);
        }
        dp[i][j] = res;
        return res;
    }
}

(2) bfs (TLE!!!!!!!!!!)
class Solution {
    int[][] dirs = {{0, 1}, {1,0}, {0, -1}, {-1, 0}};
    public int longestIncreasingPath(int[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return 0;
        int res = 1;
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(dp[i][j] > 0)
                    continue;
                Queue<int[]> q = new LinkedList();
                q.offer(new int[]{i,j});
                int cnt = 1;
                while(!q.isEmpty()){
                    cnt++;
                    int len = q.size();
                    for(int k = 0; k<len; k++){
                        int[] cur = q.poll();
                        for(int[] dir : dirs){
                            int x = cur[0]+dir[0];
                            int y = cur[1]+dir[1];
                            if(x<0 || x>=m || y<0 || y>=n || matrix[x][y] <= matrix[i][j] || cnt <= dp[x][y]){
                                continue;
                            }
                            dp[x][y] = cnt;
                            res = Math.max(res, cnt);
                            q.offer(new int[]{x, y});
                        }
                    }
                }
            }
        }
        return res;
    }
    
}

330. Patching Array
miss 要设置成long型， 否则会超出Integer.MAX_VALUE
我们定义一个变量miss，用来表示[0,n]之间最小的不能表示的值，那么初始化为1，为啥不为0呢，因为n=0没啥意义，直接返回0了。那么此时我们能表示的范围是[0, miss)，表示此时我们能表示0到miss-1的数，如果此时的num <= miss，那么我们可以把我们能表示数的范围扩大到[0, miss+num)，如果num>miss，那么此时我们需要添加一个数，为了能最大限度的增加表示数范围，我们加上miss它本身，以此类推直至遍历完整个数组，我们可以得到结果。下面我们来举个例子说明：
给定nums = [1, 2, 4, 11, 30], n = 50，我们需要让[0, 50]之间所有的数字都能被nums中的数字之和表示出来。
首先使用1, 2, 4可能表示出0到7之间的所有数，表示范围为[0, 8)，但我们不能表示8，因为下一个数字11太大了，所以我们要在数组里加上一个8，此时能表示的范围是[0, 16)，那么我们需要插入16吗，答案是不需要，因为我们数组有1和4，可以组成5，而下一个数字11，加一起能组成16，所以有了数组中的11，我们此时能表示的范围扩大到[0, 27)，但我们没法表示27，因为30太大了，所以此时我们给数组中加入一个27，那么现在能表示的范围是[0, 54)，已经满足要求了，我们总共添加了两个数8和27，所以返回2即可。
class Solution {
    public int minPatches(int[] nums, int n) {
        long miss = 1;
        int res = 0;
        int i = 0;
        while(miss <= n){
            if(i<nums.length && nums[i] <= miss){
                miss += nums[i];
                i++;
            }else{
                miss += miss;
                res++;
            }
        }
        return (int)res;
    }
}
