355. Design Twitter
followMap is to record followees, tweetMap is to record user’s tweetId.
tweetList is to record the order, so when we want to see most recent 10 post, we can traverse from the very last.
when we need most 10 recent post, we need to store user’s and his followers’ tweetId into a set.
Then use both this list and tweetList to get the result.
http://www.voidcn.com/article/p-dcxwkcpq-bhh.html
class Twitter {

    private Map<Integer, List<Integer>> followMap;
    private Map<Integer, List<Integer>> tweetMap;
    private List<Integer> tweetList;
    
    /** Initialize your data structure here. */
    public Twitter() {
        followMap = new HashMap<>();
        tweetMap = new HashMap<>();
        tweetList = new ArrayList<>();
    }
    
    /** Compose a new tweet. */
    public void postTweet(int userId, int tweetId) {
        List<Integer> list = new ArrayList<>();
        if(tweetMap.containsKey(userId)){
            list = tweetMap.get(userId);
        }
        list.add(tweetId);
        tweetMap.put(userId, list);
        tweetList.add(tweetId);
    }
    
    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
    public List<Integer> getNewsFeed(int userId) {
        List<Integer> list = new ArrayList<>();
        if(tweetMap.containsKey(userId)){
            list = tweetMap.get(userId);
        }
        List<Integer> allList = new ArrayList<>(list);
        List<Integer> followees = new ArrayList<>();
        if(followMap.containsKey(userId)){
            followees = followMap.get(userId);
        }
        for(int i = 0; i< followees.size(); i++){
            if(tweetMap.containsKey(followees.get(i))){
                allList.addAll(tweetMap.get(followees.get(i)));
            }
        }
        Set<Integer> set =  new HashSet<>(allList);
        List<Integer> res = new ArrayList<>();
        int k = 0;
        for(int i = tweetList.size() - 1; i>=0; i--){
            if(k == 10)
                break;
            int tweetId = tweetList.get(i);
            if(set.contains(tweetId)){
                res.add(tweetId);
                k++;
            }
        }
        return res;
    }
    
    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */
    public void follow(int followerId, int followeeId) {
        List<Integer> list = new ArrayList<>();
        if (followMap.containsKey(followerId)) {
            list = followMap.get(followerId);
        }
        if (!list.contains(followeeId)) {//duplicate
            list.add(followeeId);
        }
        followMap.put(followerId, list);
    }
    
    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
    public void unfollow(int followerId, int followeeId) {
        if (followMap.containsKey(followerId)) {
            List<Integer> list = followMap.get(followerId);
            list.remove((Integer) followeeId);
            followMap.put(followerId, list);
        }
    }
}

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter obj = new Twitter();
 * obj.postTweet(userId,tweetId);
 * List<Integer> param_2 = obj.getNewsFeed(userId);
 * obj.follow(followerId,followeeId);
 * obj.unfollow(followerId,followeeId);
 */

356. Line Reflection
get the max and min x value of all points and put points into map, then compute the average, that’ s the line we want to find.
Then iterate all points again to see if there is a reflected point of current point.
Since there maybe several y value on x, so we need a set in the map.
Note: double and int conversion
* Time complexity: O(n)
* Space complexity: O(n)
class Solution {
    public boolean isReflected(int[][] points) {
        Map<Integer, Set<Integer>> map = new HashMap<>();
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        for(int[] point: points){
            max = Math.max(max, point[0]);
            min = Math.min(min, point[0]);
            Set<Integer> set = new HashSet<>();
            if(map.containsKey(point[0])){
                set = map.get(point[0]);
            }
            set.add(point[1]);
            map.put(point[0], set);
        }
        double y = (double)(max + min)/2.0;
        System.out.println(String.valueOf(y));
        for(int[] point: points){
            int temp = (int)(2 * y) - point[0];
            if(!map.containsKey(temp) || !map.get(temp).contains(point[1])){
                return false;
            }
        }
        return true;
    }
}

357. Count Numbers with Unique Digits
1. Let f(k) = count of numbers with unique digits with length equals k.
2. f(1) = 10, ..., f(k) = 9 * 9 * 8 * ... (9 - k + 2) [The first factor is 9 because a number cannot start with 0].
class Solution {
    public int countNumbersWithUniqueDigits(int n) {
        if(n == 0) return 1;
        int res = 10, cnt = 9;
        for(int i = 2; i<=n; i++){
            cnt *= (11 - i);
            res += cnt;
        }
        return res;
    }
}

358. Rearrange String k Distance Apart
Use hashmap to count and priorityqueue to order.
* Time complexity: O(nlogn)
* Space complexity: O(n)
class Solution {
    public String rearrangeString(String s, int k) {
        Map<Character, Integer> map = new HashMap<>();
        for(char c : s.toCharArray()){
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<>((a,b) -> b.getValue() - a.getValue());
        pq.addAll(map.entrySet());
        
        Queue<Map.Entry<Character, Integer>> queue = new LinkedList<>();
        StringBuilder res = new StringBuilder();
        
        while(!pq.isEmpty()){
            Map.Entry<Character, Integer> cur = pq.poll();
            res.append(cur.getKey());
            cur.setValue(cur.getValue() - 1);
            queue.offer(cur);
            if(queue.size() < k){
                continue;
            }
            Map.Entry<Character, Integer> next = queue.poll();
            if(next.getValue() > 0){
                pq.offer(next);
            }
        }
        return res.length() == s.length() ? res.toString() : "";
    }
}

