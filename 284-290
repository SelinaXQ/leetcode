284. Peeking Iterator design
// Java Iterator interface reference:
// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html
class PeekingIterator implements Iterator<Integer> {

    private Iterator<Integer> i;
    private Integer next;
    public PeekingIterator(Iterator<Integer> iterator) {
        // initialize any member here.
        i = iterator;
        if(i.hasNext()){
            next = i.next();
        }
    }

    // Returns the next element in the iteration without advancing the iterator.
    public Integer peek() {
        return next;
    }

    // hasNext() and next() should behave the same as in the Iterator interface.
    // Override them if needed.
    @Override
    public Integer next() {
        Integer res = next;
        next = i.hasNext()? i.next() : null;
        return res;
    }

    @Override
    public boolean hasNext() {
        return next!=null;
    }
}

285. Inorder Successor in BST binary search tree
首先看根节点值和p节点值的大小，如果根节点值大，说明p节点肯定在左子树中，那么此时我们先将 res 赋为 root，然后 root 移到其左子节点，循环的条件是 root 存在，我们再比较此时 root 值和p节点值的大小，如果还是 root 值大，我们重复上面的操作，如果p节点值，那么我们将 root 移到其右子节点，这样当 root 为空时，res 指向的就是p的后继节点
* Time complexity: O(n)
* Space complexity: O(n)
(1) recursion
public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        if(root == null)
            return null;
        if(root.val <= p.val){
            return inorderSuccessor(root.right, p);
        }else{
            TreeNode temp = inorderSuccessor(root.left, p);
            return temp !=null ? temp : root;
        }
    }
(2) iteration
public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        TreeNode res = null;
        while(root!=null){
            if(root.val <= p.val){
                root = root.right;
            }else{
                res = root;
                root = root.left;
            }
        }
        return res;
    }

286. Walls And Gates

(1) dfs
class Solution {
    public void wallsAndGates(int[][] rooms) {
        for(int i = 0; i<rooms.length; i++){
            for(int j = 0; j<rooms[0].length; j++){
                if(rooms[i][j] == 0)
                    dfs(rooms, i, j, 0);
            }
        }
    }
    
    private void dfs(int[][] rooms, int i, int j, int dis){
        if(i<0 || i>= rooms.length || j<0 || j>= rooms[0].length || rooms[i][j] < dis){
            return;
        }
        rooms[i][j] = dis;
        dfs(rooms, i-1, j, dis+1);
        dfs(rooms, i, j-1, dis+1);
        dfs(rooms, i+1, j, dis+1);
        dfs(rooms, i, j+1, dis+1);
    }
}
(2) bfs
Instead of searching from an empty room to the gates, how about searching the other way round? In other words, we initiate breadth-first search (BFS) from all gates at the same time. Since BFS guarantees that we search all rooms of distance d before searching rooms of distance d + 1, the distance to an empty room must be the shortest.
class Solution {
    private List<int[]> directions = Arrays.asList(
        new int[] {1, 0},
        new int[] {-1, 0},
        new int[] {0, 1},
        new int[] {0, -1}
     );
    
    public void wallsAndGates(int[][] rooms) {
        int m = rooms.length;
        if(m == 0) return;
        int n = rooms[0].length;
        Queue<int[]> q = new LinkedList<>();
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(rooms[i][j] == 0)
                    q.add(new int[] {i,j});
            }
        }
        
        while(!q.isEmpty()){
            int[] cur = q.poll();
            int row = cur[0];
            int col = cur[1];
            for(int[] d : directions){
                int r = row + d[0];
                int c = col + d[1];
                if(r<0 || c<0 || r>=m || c>=n || rooms[r][c] != Integer.MAX_VALUE){
                    continue;
                }
                rooms[r][c] = rooms[row][col] + 1;
                q.add(new int[] {r, c});
            }
        }
    }
}

287. Find The Duplicate Number
(1) sort
* Time complexity: O(nlogn)
* Space complexity: O(1)
public int findDuplicate(int[] nums) {
        Arrays.sort(nums);
        for(int i = 1; i<nums.length; i++){
            if(nums[i] == nums[i-1])
                return nums[i];
        }
        return -1;
    }
(2) two pointers
* Time complexity: O(n)
* Space complexity: O(1)
参考帖子(http://bookshadow.com/weblog/2015/09/28/leetcode-find-duplicate-number/)，其核心思想快慢指针在之前的题目 Linked List Cycle II 中就有应用，这里应用的更加巧妙一些，由于题目限定了区间 [1,n]，所以可以巧妙的利用坐标和数值之间相互转换，而由于重复数字的存在，那么一定会形成环，我们用快慢指针可以找到环并确定环的起始位置
public int findDuplicate(int[] nums) {
        int slow = 0;
        int fast = 0;
        int finder = 0;
        while (true) {
            slow = nums[slow];
            fast = nums[nums[fast]];

            if (slow == fast) {
                break;
            }
        }

        while (true) {
            slow = nums[slow];
            finder = nums[finder];
            if (slow == finder) {
                return slow;
            }
        }
    }
288. Unique Word Abbreviation design
class ValidWordAbbr {

    private Map<String, String> map;
    public ValidWordAbbr(String[] dictionary) {
        map = new HashMap<>();
        for(String s: dictionary){
            String key = getKey(s);
            if(map.containsKey(key)){
                if(!map.get(key).equals(s)){
                    map.put(key, "");
                }
            }else{
                map.put(key, s);
            }
            
        }
    }
    
    public boolean isUnique(String word) {
        return !map.containsKey(getKey(word)) || map.get(getKey(word)).equals(word);
    }
    private String getKey(String s){
        if(s.length() <= 2)
            return s;
        return s.charAt(0)+Integer.toString(s.length()-2)+ s.charAt(s.length()-1); 
    }
}

/**
 * Your ValidWordAbbr object will be instantiated and called as such:
 * ValidWordAbbr obj = new ValidWordAbbr(dictionary);
 * boolean param_1 = obj.isUnique(word);
 */

289. Game Of Life
由于题目中要求我们用置换方法in-place来解题，所以我们就不能新建一个相同大小的数组，那么我们只能更新原有数组，但是题目中要求所有的位置必须被同时更新，但是在循环程序中我们还是一个位置一个位置更新的，那么当一个位置更新了，这个位置成为其他位置的neighbor时，我们怎么知道其未更新的状态呢，我们可以使用状态机转换：
状态0： 死细胞转为死细胞
状态1： 活细胞转为活细胞
状态2： 活细胞转为死细胞
状态3： 死细胞转为活细胞
最后我们对所有状态对2取余，那么状态0和2就变成死细胞，状态1和3就是活细胞，达成目的。我们先对原数组进行逐个扫描，对于每一个位置，扫描其周围八个位置，如果遇到状态1或2，就计数器累加1，扫完8个邻居，如果少于两个活细胞或者大于三个活细胞，而且当前位置是活细胞的话，标记状态2，如果正好有三个活细胞且当前是死细胞的话，标记状态3。完成一遍扫描后再对数据扫描一遍，对2取余变成我们想要的结果。
* Time complexity: O(m*n)
* Space complexity: O(1)
 public void gameOfLife(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        
        int dx[] = {-1, -1, -1, 0, 1, 1, 1, 0};
        int dy[] = {-1, 0, 1, 1, 1, 0, -1, -1};
        
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                int cnt = 0;
                for(int k = 0; k<8; k++){
                    int x = i + dx[k];
                    int y = j + dy[k];
                    
                    if(x>=0 && x<m && y>=0 && y<n && (board[x][y] == 1 || board[x][y] == 2))
                        cnt ++;
                }
                if(board[i][j] == 1 && (cnt < 2 || cnt > 3)) board[i][j] = 2;
                else if(board[i][j] == 0 && cnt == 3) board[i][j] = 3;
            }
        }
        
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                board[i][j] %= 2;
            }
        }
    }

290. Word Pattern
* Time complexity: O(n)
* Space complexity: O(n)
public boolean wordPattern(String pattern, String str) {
        String [] words = str.split(" ");
        if(words.length != pattern.length())
            return false;
        
        Map<Character, String> map = new HashMap();
        Set<String> set = new HashSet();
        
        for(int i = 0; i<words.length; i++){
            char c = pattern.charAt(i);
            if(!map.containsKey(c)){
                if(!set.add(words[i]))//该单词在之前遇到过
                    return false;
                map.put(c, words[i]);
            }else if(!map.get(c).equals(words[i])){
                return false;
            }
        }
        return true;
    }
