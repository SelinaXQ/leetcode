359. Logger Rate Limiter design
Use hashmap to record message and it’s timestamp,
If the message is not in the map, put the message and timestamp into map and return true.
If the timestamp - message’s previous timestamp >= 10, update map and return true;
otherwise, we return false.
class Logger {

    private HashMap<String, Integer> map;
    
    /** Initialize your data structure here. */
    public Logger() {
        map = new HashMap<>();
    }
    
    /** Returns true if the message should be printed in the given timestamp, otherwise returns false.
        If this method returns false, the message will not be printed.
        The timestamp is in seconds granularity. */
    public boolean shouldPrintMessage(int timestamp, String message) {
        if(!map.containsKey(message)){
            map.put(message, timestamp);
            return true;
        }else{
            if(timestamp - map.get(message) >= 10){
                map.put(message, timestamp);
                return true;
            }
        }
        return false;
    }
}

/**
 * Your Logger object will be instantiated and called as such:
 * Logger obj = new Logger();
 * boolean param_1 = obj.shouldPrintMessage(timestamp,message);
 */

360. Sort Transformed Array
three cases:
a > 0:
value at both sides are larger than middle, so we prepare two pointers start from both side, compute value and compare, choose the larger one and put it at last position of the result array
a < 0:
value at middle is larger than two sides, still two pointers start from both side, calculate and compare, we choose smaller value and put it  at the first position in the result array.
a = 0:
it’s linear increase or decrease, so just compute in order
* Time complexity: O(n)
* Space complexity: O(1)
class Solution {
    public int[] sortTransformedArray(int[] nums, int a, int b, int c) {
        int n = nums.length;
        int left = 0;
        int right = n-1;
        int[] res = new int[n];
        int index = a >= 0 ? n-1 : 0;
        while(left <= right){
            if(a >= 0){
                int leftV = calculate(nums[left], a, b, c);
                int rightV = calculate(nums[right], a, b, c);
                res[index--] = leftV >= rightV ? calculate(nums[left++], a, b, c) : calculate(nums[right--], a, b, c);
                
            }else{
                int leftV = calculate(nums[left], a, b, c);
                int rightV = calculate(nums[right], a, b, c);
                res[index++] = leftV <= rightV ? calculate(nums[left++], a, b, c) : calculate(nums[right--], a, b, c);
            }
        }
        return res;
    }
    private int calculate(int num, int a, int b, int c){
        return a * num * num + b * num + c;
    }
}

361. Bomb Enemy
traverse over row, 
for every row, we maintain a rowCnt and colCnt[j] to count number of enemy in current row, and in current column.
if we are at very first position, like i = 0 or j = 0, or there a wall before we start to calculate.
if 0 is in current position, we update res.
* Time complexity: O(n^2)
* Space complexity: O(n)
class Solution {
    public int maxKilledEnemies(char[][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length == 0){
            return 0;
        }
        int res = 0;
        int m = grid.length;
        int n = grid[0].length;
        int rowCnt = 0;
        int[] colCnt = new int[n];
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(j == 0 || grid[i][j-1] == 'W'){
                    rowCnt = 0;
                    for(int k = j; k<n && grid[i][k] != 'W'; k++){
                        
                        rowCnt += grid[i][k] == 'E' ? 1 : 0;
                    }
                }
                if(i == 0 || grid[i-1][j] == 'W'){
                    colCnt[j] = 0;
                    for(int k = i; k<m && grid[k][j] != 'W'; k++){
                        colCnt[j] += grid[k][j] == 'E' ? 1 : 0;
                    }
                }
                if(grid[i][j] == '0'){
                    res = Math.max(res, rowCnt + colCnt[j]);
                }
            }
        }
        return res;
    }
}

362. Design Hit Counter design
Use Queue to store hit,
if we want to getHit, we need to see that if the peek number is beyond 5 minutes, if it is, we poll it out,
until the peek value is within 5 minutes, and we return queue’s size;

class HitCounter {

    Queue<Integer> queue;
    
    /** Initialize your data structure here. */
    public HitCounter() {
        queue = new LinkedList<>();
    }
    
    /** Record a hit.
        @param timestamp - The current timestamp (in seconds granularity). */
    public void hit(int timestamp) {
        queue.offer(timestamp);
    }
    
    /** Return the number of hits in the past 5 minutes.
        @param timestamp - The current timestamp (in seconds granularity). */
    public int getHits(int timestamp) {
        while(!queue.isEmpty() && timestamp - queue.peek() >= 300){
            queue.poll();
        }
        return queue.size();
    }
}

/**
 * Your HitCounter object will be instantiated and called as such:
 * HitCounter obj = new HitCounter();
 * obj.hit(timestamp);
 * int param_2 = obj.getHits(timestamp);
 */

follow up: What if the number of hits per second could be very large? Does your design scale?
we maintain two array, one for hits and one for times, for every timestamp we mode with 300 and see if the value in times in this position is equal to the timestamp, if not, it means beyond 5 minutes, we reset it to 1, else plus 1.
when gethits, we judge whether times are within 5 minutes, if it is we add up the hits.

class HitCounter {

    private int[] hits;
    private int[] times;
    
    /** Initialize your data structure here. */
    public HitCounter() {
        hits = new int[300];
        times = new int[300];
    }
    
    /** Record a hit.
        @param timestamp - The current timestamp (in seconds granularity). */
    public void hit(int timestamp) {
        int idx = timestamp % 300;
        if(times[idx] == timestamp){
            hits[idx]++;
        }else{
            times[idx] = timestamp;
            hits[idx] = 1;
        }
    }
    
    /** Return the number of hits in the past 5 minutes.
        @param timestamp - The current timestamp (in seconds granularity). */
    public int getHits(int timestamp) {
        int res = 0;
        for(int i = 0; i<300; i++){
            if(timestamp - times[i] < 300){
                res += hits[i];
            }
        }
        return res;
    }
}

/**
 * Your HitCounter object will be instantiated and called as such:
 * HitCounter obj = new HitCounter();
 * obj.hit(timestamp);
 * int param_2 = obj.getHits(timestamp);
 */

363. Max Sum of Rectangle No Larger Than K hard
http://bookshadow.com/weblog/2016/06/22/leetcode-max-sum-of-sub-matrix-no-larger-than-k/
类似于找最大matrix那道题， 首先枚举列的起止范围x,y， 
子矩阵matrix[][x..y]可以通过部分和数组sums进行表示：
sums[i] = Σ(matrix[i][x..y])
接下来求解sums数组中和不大于k的最大子数组的和.
对于每个sum[i], 我们想找到一个sum[j], 满足sum[j] - sum[i] <= k ,
即 sum[j] >= sum[i] - k .
所以我们可以利用TreeSet的ceiling函数返回最小的大于(sum[i] - k) 的值， 找到这个sum[j], 那么我们需要的结果就是sum[i]减去这个值
* Time complexity:  O(n^2 * m * logm)
* Space complexity: O(n)
class Solution {
    public int maxSumSubmatrix(int[][] matrix, int k) {
        int m = matrix.length, n = 0;
        if (m > 0) n = matrix[0].length;
        if (m * n == 0) return 0;
        
        int M = Math.max(m, n);
        int N = Math.min(m, n);
        
        int ans = Integer.MIN_VALUE;
        for (int x = 0; x < N; x++) {
            int sums[] = new int[M];
            for (int y = x; y < N; y++) {
                TreeSet<Integer> set = new TreeSet<Integer>();
                int num = 0;
                for (int z = 0; z < M; z++) {
                    sums[z] += m > n ? matrix[z][y] : matrix[y][z];
                    num += sums[z];
                    if (num <= k) 
                        ans = Math.max(ans, num);
                    Integer i = set.ceiling(num - k);
                    if (i != null) 
                        ans = Math.max(ans, num - i);
                    set.add(num);
                }
            }
        }
        return ans;
    }
}

follow up: 
1. What if the number of rows is much larger than the number of columns?
rows多 那么我们就遍历cols, 
