347. Top K Frequent Element
(1) use hashmap to count, and then use priorityqueue to rank the count.
* Time complexity: O(nlogn)
* Space complexity: O(n)
class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer> res = new ArrayList<>();
        if(nums == null || nums.length == 0){
            return res;
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int num : nums){
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        
        PriorityQueue<Map.Entry<Integer, Integer>> pq = new PriorityQueue<>((a,b) ->  (b.getValue() - a.getValue()));
        
        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            pq.add(entry);
        }
        
        while(res.size() < k){
            Map.Entry<Integer, Integer> entry = pq.poll();
            res.add(entry.getKey());
        }
        return res;
    }
}

(2) bucket sort
edge case: duplicate 
pretty same as the first solution, after we use hashmap count the frequency, we put each number into related bucket,
the index of the bucket is the number’s frequency.
when add it to result, we traverse from the very last index, if it is no null, we addAll(), since there maybe duplicate.
* Time complexity: O(n)
* Space complexity: O(n)
public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer> res = new ArrayList<>();
        if(nums == null || nums.length == 0){
            return res;
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int num : nums){
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        
        List<Integer>[] bucket = new List[nums.length+1];
        for(int num : map.keySet()){
            int time = map.get(num);
            if(bucket[time] == null){
                bucket[time] = new ArrayList<>();
            }
            bucket[time].add(num);
        }
        
        for(int i = bucket.length - 1; i>=0 && res.size() < k; i--){
            if(bucket[i] != null){
                res.addAll(bucket[i]);
            }
        }
        
        return res;
    }

348. Design Tic-Tac-Toe design
* Time complexity: O(n^2)
* Space complexity: O(n^2)
class TicTacToe {

    private int[][] board;
    
    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        board = new int[n][n];
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    public int move(int row, int col, int player) {
        board[row][col] = player;
        int i = 0, j = 0, n = board.length;
        for(j = 1; j < n; j++){ // row
            if(board[row][j] != board[row][j-1])
                break;
        }
        if(j == n) return player;
        for(i = 1; i < n; i++){ // col
            if(board[i][col] != board[i-1][col])
                break;
        }
        if(i == n) return player;
        if(row == col){ // diagonal
            for(i = 1; i < n; i++){
                if(board[i][i] != board[i-1][i-1])
                    break;
            }
            if(i == n) return player;
        }
        if(row + col == n - 1){  // 在正中间的 reverse diagonal
            for(i = 1; i<n; i++){
                if(board[n - i - 1][i] != board[n-i][i-1])
                    break;
            }
            if(i == n) return player;
        }
        return 0;
    }
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */

(2) O(n) better
Use one- dimensional array to record rows, cols, if it is player 1 in [row, col], then rows[row] + 1, cols[col] + 1.
Else if player 2, then -1. 
Same for diagonal and reverse diagonal.
if the player can win, this only happens when one of the sum’s absolute value is n.
* Time complexity: O(n)
* Space complexity: O(n)
class TicTacToe {

    private int[] rows, cols;
    private int diag, revDiag, N;
    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        rows = new int[n];
        cols = new int[n];
        diag = 0;
        revDiag = 0;
        N = n;
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    public int move(int row, int col, int player) {
        int add = player == 1 ? 1 : -1;
        rows[row] += add;
        cols[col] += add;
        diag += (row == col) ? add : 0;
        revDiag += (row + col == N-1) ? add : 0;
        return (Math.abs(rows[row]) == N || Math.abs(cols[col]) == N 
                || Math.abs(diag) == N || Math.abs(revDiag) == N) ? player : 0;
    }
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */

349. Intersection of Two Arrays
* Time complexity: O(n)
* Space complexity: O(n)
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set = new HashSet<>();
        Set<Integer> res = new HashSet<>();
        for(int num : nums1) {
            set.add(num);
        }
        for(int num : nums2){
            if(set.contains(num)){
                res.add(num);
            }
        }
        int[] resArr = new int[res.size()];
        int i = 0;
        for(Integer num : res){
            resArr[i++] = num;
        }
        return resArr;
    }
}

350. Intersection of Two Arrays II
(1) hashmap
use hash map to count for nums1,
then traverse nums2, if map contains cur number and it’s value > 0, put it into result and update map value -1 .
* Time complexity: O(n)
* Space complexity: O(n)
class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        HashMap<Integer, Integer> map = new HashMap<>();
        List<Integer> res = new ArrayList<>();
        for(int num : nums1){
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        for(int num : nums2){
            if(map.containsKey(num) && map.get(num) > 0){
                res.add(num);
                map.put(num, map.getOrDefault(num, 0) - 1);
            }
        }
        int[] arr = new int[res.size()];
        int i = 0;
        for(Integer num : res){
            arr[i++] = num;
        }
        return arr;
    }
}

(2) sort and two pointers
sort the array then use two pointers start separately from the index 0, if two numbers are equal, add it to res.
If nums1 < nums2 , move the first pointer right, else the second.
the condition of while loop is both pointers are smaller than array’s length.
* Time complexity: O(n)
* Space complexity: O(1)
class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        List<Integer> res = new ArrayList<>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int left1 = 0;
        int left2 = 0;
        while(left1 < nums1.length && left2 < nums2.length){
            if(nums1[left1] == nums2[left2]){
                res.add(nums1[left1]);
                left1++;
                left2++;
            }else if(nums1[left1] > nums2[left2]){
                left2++;
            }else{
                left1++;
            }
        }
        int[] arr = new int[res.size()];
        for(int i = 0; i<res.size(); i++){
            arr[i] = res.get(i);
        }
        return arr;
    }
}


