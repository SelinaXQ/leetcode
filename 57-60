57. Insert Interval array
(1)Similar to 56.
* Time complexity: O(nlogn)
* Space complexity: O(n)
public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> res = new ArrayList<>();
        if(newInterval == null) return intervals;
        if(intervals == null && newInterval == null) return res.toArray(new int[0][]);
        int length = intervals.length;
        int[] start = new int[length+1];
        int[] end = new int[length+1];
        for(int i = 0; i<length; i++){
            start[i] = intervals[i][0];
            end[i] = intervals[i][1];
        }
        start[length] = newInterval[0];
        end[length] = newInterval[1];
        Arrays.sort(start);
        Arrays.sort(end);
        int i = 0;
        while(i<length+1){
            int st = start[i];
            while(i<length && start[i+1]<=end[i]) i++;
            int en = end[i];
            res.add(new int[]{st, en});
            i++;
        }
        return res.toArray(new int[0][]);
    }
(2) Greedy method
* Time complexity: O(n)
* Space complexity:O(n)
public int[][] insert(int[][] intervals, int[] newInterval) {
        int newStart = newInterval[0], newEnd = newInterval[1];
        int idx = 0, n = intervals.length;
        LinkedList<int[]> res = new LinkedList<int[]>();
        
        //add all intervals starting before newInterval
        while(idx<n && newStart>intervals[idx][0]) res.add(intervals[idx++]);
        
        //add newInterval
        int[] interval = new int[2];
        //If there is no overlap, just add the interval
        if(res.isEmpty() || res.getLast()[1]<newStart) res.add(newInterval);
        else{
            interval = res.removeLast();
            interval[1] = Math.max(interval[1], newEnd);
            res.add(interval);
        }
        
        //add next intervals, merge with newInterval if needed
        while(idx<n){
            interval = intervals[idx++];
            int start = interval[0], end = interval[1];
            //If there is no overlap, just add an interval
            if(res.getLast()[1]<start) res.add(interval);
            else{
                interval = res.removeLast();
                interval[1] = Math.max(interval[1],end);
                res.add(interval);
            }
        }
        return res.toArray(new int[0][]);
    }

58. Length of Last word


* Time complexity: O(n)
* Space complexity:O(1)
public int lengthOfLastWord(String s) {
        if(s == null || s.length() == 0) return 0;
        //trim first incase the  " " is at last 
        return s.trim().length()-1 - s.trim().lastIndexOf(" ");
    }

59. Spiral Matrix II 2d array
Similar to spiral matrix 1, add number in clock wise, just remember to add one more when n%2!=0.
* Time complexity: O(n)
* Space complexity:O(n)
public int[][] generateMatrix(int n) {
        int[][] res = new int[n][n];
        if(n<=0) return res;
        int top = 0, bottom = n-1, left = 0, right = n-1;
        int k = 1;
        while(top<bottom && left<right){
            for(int i = left; i<right; i++){
                res[top][i] = k;
                k++;
            }
            for(int i = top; i<bottom; i++){
                res[i][right] = k;
                k++;
            }
            for(int i = right; i>left; i--){
                res[bottom][i] = k;
                k++;
            }
            for(int i = bottom; i>top; i--){
                res[i][left] = k;
                k++;
            }
            top++;
            bottom--;
            left++;
            right--;
        }
        if(n%2!=0) res[n/2][n/2] = k;
        return res;
    }

60. Permutation Sequence

* Time complexity: O(n^2)
* Space complexity:O(n)
* 
public String getPermutation(int n, int k) {
        char[] result = new char[n];
        ArrayList<Integer> nums = new ArrayList<Integer>();
        int[] factorial = new int[n];
        factorial[0] = 1;
        for(int i = 1; i<n; i++){
            factorial[i] = factorial[i-1]*i;
        }
        for(int i = 1; i<=n; i++){
            nums.add(i);
        }
        k--;
        for(int i = 0; i<n; i++){
            result[i] = Character.forDigit(nums.remove(k/factorial[n-1-i]),10);
            k = k%factorial[n-1-i];
        }
        return new String(result);
    }

//BY LEETCODE discussion, seem to easier to look through
public String getPermutation(int n, int k) {
        List<Integer> num = new LinkedList<Integer>();
        for (int i = 1; i <= n; i++) num.add(i);
        int[] fact = new int[n];  // factorial
        fact[0] = 1;
        for (int i = 1; i < n; i++) fact[i] = i*fact[i-1];
        k = k-1;
        StringBuilder sb = new StringBuilder();
        for (int i = n; i > 0; i--){
            int ind = k/fact[i-1];
            k = k%fact[i-1];
            sb.append(num.get(ind));
            num.remove(ind);
        }
        return sb.toString();
    }
