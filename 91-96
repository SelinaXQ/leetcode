91. Decode Ways string
0 is special case:
If it shows at first position, there is no possible decode way.
When it show in between, we need to consider 0 together with it’s previous number.
    If it is larger than 3, then there is no possible decode way for this string
    else the decode way unchanged.
For every non zero number, if it’s previous number is not 0 and these two number is smaller than 26, then
there is a new combination that we can consider these two number as a whole, so we add 1 to the decode ways.
* Time complexity: O(n)
* Space complexity: O(1)

public int numDecodings(String s) {
        if(s == null || s.length()<=0) return 0;
        int size = s.length();
        if(s.charAt(0) == '0') return 0;
        int curWays = 1;
        int preWays = 1;
        for(int idx = 1; idx<size; idx++){
            int temp = curWays;
            if(s.charAt(idx) == '0'){
                curWays = preWays;
                if(s.charAt(idx-1)>='3' || s.charAt(idx-1)<='0') return 0;
            }else{
                if(s.charAt(idx-1)!='0'&& Integer.valueOf(s.substring(idx-1, idx+1))<=26) curWays += preWays;
            }
            preWays = temp;
        }
        return curWays;
    }

92. Reverse Linked List II linkedlist
First use a slow and fast node to decide the start and the end node that need to be reverse.
Prev and after node is to record the node before slow and after slow.
We reverse the start and end first then the node between them.
* Time complexity: O(n)
* Space complexity:O(1)

public ListNode reverseBetween(ListNode head, int m, int n) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode slow = head;
        ListNode fast = head;
        ListNode after = slow.next;
        ListNode prev = dummy;
        for(int i = 1; i<m; i++){
            prev = prev.next;
            slow = slow.next;
            after = after.next;
        }
        for(int i =1; i<n; i++){
            fast = fast.next;
        }
        prev.next = fast;
        slow.next = fast.next;
        for(int i = 0; i<n-m; i++){
            ListNode temp = after.next;
            after.next = slow;
            slow = after;
            after = temp;
            
        }
        return dummy.next;
    }

93. Restore IP Address recursion
考虑点与点之前填加一位，两位，三位的情况分别调用helper
两位与三位时要考虑第一位不能为0
每次填加完裁剪掉前面的数字再次调用helper
* Time complexity:??? O(3^N)
* Space complexity:constant space to keep the solutions, not more than 19 valid IP addresses.

public List<String> restoreIpAddresses(String s) {
        ArrayList<String> res = new ArrayList<String>();
        if(s== null && s.length()>12) return res;
        helper(res, s, "", 0);
        return res;
    }
    private void helper(List<String> res, String s, String current, int field){
        if(field == 4 && s.length() == 0) res.add(current.substring(1));
        else if(field == 4 || s.length() == 0) return;
        else{
            helper(res, s.substring(1), current+"."+s.substring(0,1), field+1);//一位
            if(s.length()>1 && s.charAt(0)!='0') helper(res, s.substring(2), current+"."+s.substring(0,2), field+1);//两位
            if(s.length()>2 && Integer.valueOf(s.substring(0,3))<=255 && s.charAt(0)!='0') helper(res, s.substring(3), current+"."+s.substring(0,3), field+1);//三位
        }
    }

94. Binary Tree Inorder traversal 中序遍历 binary tree recursion, stack
(1) recursion
* Time complexity: O(n)
* Space complexity: O(n)
public List<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> res = new ArrayList<Integer>();
        if(root == null) return res;
        helper(root, res);
        return res;
    }
    private void helper(TreeNode root, List<Integer> list){
        if(root == null) return;
        helper(root.left, list);
        list.add(root.val);
        helper(root.right, list);
    }
(2)iteration with stack
* Time complexity: O(n)
* Space complexity: O(n)
 public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        if(root == null) return res;
        
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curr = root;
        while(curr!=null || !stack.isEmpty()){
            while(curr!=null){//keep push left node if it is not null
                stack.push(curr);
                curr = curr.left;
            }
            curr = stack.pop(); // pop left node out and add it's val into res
            res.add(curr.val);
            curr = curr.right;// move to right node, if right node has child, also need to push itself and it's left child into stack
        }
        return res;
    }

95. Unique Binary Search Trees II recursion
* Time complexity: O(n*n)
* Space complexity: O(number of solutions)
public List<TreeNode> generateTrees(int n) {
        return helper(1,n);
    }
    private List<TreeNode> helper(int min, int max){
        List<TreeNode> res = new ArrayList<TreeNode>();
        if(min>max) return res;
        for(int i = min; i<=max; i++){
            List<TreeNode> leftList= helper(min, i-1);
            List<TreeNode> rightList = helper(i+1, max);
            if(leftList.size() == 0 && rightList.size() == 0) {
                TreeNode root = new TreeNode(i);
                res.add(root);
            }else if(leftList.size() == 0){
                for(TreeNode right :rightList){
                    TreeNode root = new TreeNode(i);
                    root.right = right;
                    res.add(root);
                }
            }else if(rightList.size() == 0){
                for(TreeNode left: leftList){
                    TreeNode root = new TreeNode(i);
                    root.left = left;
                    res.add(root);
                }
            }else{
                for(TreeNode left:leftList){
                    for(TreeNode right: rightList){
                        TreeNode root = new TreeNode(i);
                        root.left = left;
                        root.right = right;
                        res.add(root);
                    }
                }
            }
            
        }
        return res;
    }

96. Unique Binary Search Trees dynamic programming, catalan number

https://leetcode.com/problems/unique-binary-search-trees/discuss/31666/DP-Solution-in-6-lines-with-explanation.-F(i-n)-G(i-1)-*-G(n-i)
* Time complexity:O(n^2)
* Space complexity:O(n)
public int numTrees(int n) {
        if(n<1) return 0;
        int[] nums = new int[n+1];
        nums[0] = 1;
        nums[1] = 1;
        for(int i = 2; i<=n; i++){
            for(int j = 0; j<i; j++){
                nums[i]+=(nums[j]*nums[i-j-1]);
            }
        }
        return nums[n];
    }
