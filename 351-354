351. Android Unlock Patterns
backtracking
Use a two dimensional array to record invalid connection(the number it skip), such as [1][3] = 2, 
also another array to see if current number has been visited.
the recursion condition is when the number is not visited and it does not skip any number or the skipped number
has been visited.
(1) recursion
class Solution {
    public int numberOfPatterns(int m, int n) {
        int[][] skip = new int[10][10];
        skip[1][3] = skip[3][1] = 2;
        skip[4][6] = skip[6][4] = 5;
        skip[7][9] = skip[9][7] = 8;
        skip[1][7] = skip[7][1] = 4;
        skip[2][8] = skip[8][2] = 5;
        skip[3][9] = skip[9][3] = 6;
        skip[1][9] = skip[9][1] = 5;
        skip[3][7] = skip[7][3] = 5;

        boolean[] visited = new boolean[10];
        int res = 0;
        for(int i = m; i<=n; i++){
            res += helper(skip, visited, 1, i - 1) * 4;
            res += helper(skip, visited, 2, i - 1) * 4;
            res += helper(skip, visited, 5, i - 1);
        }
        return res;
    }
    
    private int helper(int[][] skip, boolean[] visited, int num, int remain){
        if(remain < 0){
            return 0;
        }
        if(remain == 0){
            return 1;
        }
        visited[num] = true;
        int res = 0;
        for(int i = 1; i<=9; i++){
            if(!visited[i] && (skip[num][i] == 0 || visited[skip[num][i]])){
                res += helper(skip, visited, i, remain - 1);
            }
        }
        visited[num] = false;
        
        return res;
                                                                                                     
    }
}

352. Data Stream as Disjoint Intervals design
Use TreeMap to record each intervals’ start and the interval.
We can use TreeMap to find the current add number’s lower boundary and higher boundary and to see if these two intervals can be connected.
* Time complexity: addNum, O(logn). getIntervals, O(n).
* Space complexity: O(n)
class SummaryRanges {

    TreeMap<Integer, int[]> tm;
    
    /** Initialize your data structure here. */
    public SummaryRanges() {
        tm = new TreeMap<Integer, int[]>();
    }
    
    public void addNum(int val) {
        if(tm.containsKey(val))
            return;
        Integer left = tm.lowerKey(val);
        Integer right = tm.higherKey(val);
        if(left != null && right != null && tm.get(left)[1] + 1 == val && val + 1 == right){
            tm.get(left)[1] = tm.get(right)[1];
            tm.remove(right);
        }//in the middle
        else if(left != null && tm.get(left)[1] + 1 >= val){//in the right
            tm.get(left)[1] = Math.max(tm.get(left)[1], val);
        }
        else if(right != null && val+1 == right){// in the left and combine
            tm.put(val, new int[] {val, tm.get(right)[1]});
            tm.remove(right);
        }else{
            tm.put(val, new int[] {val, val});
        }
    }
    
    public int[][] getIntervals() {
        int[][] res = new int[tm.size()][2];
        int i = 0;
        for(int[] interval : tm.values()){
            res[i++] = interval;
        }
        return res;
    }
}

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges obj = new SummaryRanges();
 * obj.addNum(val);
 * int[][] param_2 = obj.getIntervals();
 */
 
353. Design Snake Game design
Use a linkedlist to record the position, and hashset to judge whether the head meets the tail

class SnakeGame {

    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    private int width, height, score;
    private int[][] food;
    private int foodIndex;
    private LinkedList<int[]> snake = new LinkedList<int[]>();
    private Set<Integer> set = new HashSet<>();
    public SnakeGame(int width, int height, int[][] food) {
        this.width = width;
        this.height = height;
        this.food = food;
        foodIndex = 0;
        score = 0;
        snake.add(new int[] {0,0});
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    public int move(String direction) {
        int[] head = snake.get(0);
        int[] tail = snake.get(snake.size() - 1);
        int cut = tail[0] * width + tail[1];
        snake.removeLast();
        
        if(direction.equals("U")){
            head[0]--;
        }else if(direction.equals("L")){
            head[1]--;
        }else if(direction.equals("R")){
            head[1]++;
        }else if(direction.equals("D")){
            head[0]++;
        }
        int add = head[0] * width + head[1];
        if(head[0] < 0 || head[0] >= height || head[1] < 0 || head[1] >= width || set.contains(add)){
            return -1;
        }
        set.add(add);
        snake.addFirst(head);
        if(foodIndex < food.length && head[0] == food[foodIndex][0] && head[1] == food[foodIndex][1]){
            snake.add(tail);
            set.add(cut);
            foodIndex++;
            score++;
        }
        set.remove(cut);
        return score;
    }
}

/**
 * Your SnakeGame object will be instantiated and called as such:
 * SnakeGame obj = new SnakeGame(width, height, food);
 * int param_1 = obj.move(direction);
 */

354. Russian Doll Envelopes
(1) dynamic programming
* Time complexity: O(n^2)
* Space complexity: O(n)
class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        int res = 0;
        int n = envelopes.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        Arrays.sort(envelopes, (a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);
        for(int i = 0; i<n; i++){
            for(int j = 0; j < i; j++){
                if(envelopes[i][0] > envelopes[j][0] && envelopes[i][1] > envelopes[j][1]){
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            res = Math.max(res, dp[i]);
        }
        return res;
    }
}

(2) dynamic programming  + binary search
我们首先要做的还是给信封排序，但是这次排序和上面有些不同，信封的宽度还是从小到大排，但是宽度相等时，我们让高度大的在前面。那么现在问题就简化了成了找高度数字中的LIS，完全就和之前那道Longest Increasing Subsequence一样了
类似于longest increasing subsequence  
class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        if (envelopes == null || envelopes.length == 0)
            return 0;
        //int res = 0;
        int n = envelopes.length;
        LinkedList<Integer> dp = new LinkedList<>();
       // Arrays.fill(dp, 1);
        Arrays.sort(envelopes, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);
        for(int i = 0; i<n; i++){
            int left = 0;
            int right = dp.size();
            int tail = envelopes[i][1];
            while(left<right){
                int mid = left + (right - left) / 2;
                if(dp.get(mid) < tail){
                    left = mid+1;
                }else{
                    right = mid;
                }
            }
            
            if(right >= dp.size()){
                dp.add(tail);
            }else{
                dp.set(right, tail);
            }
        }
        return dp.size();
    }
}
