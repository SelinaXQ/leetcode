75. Sort Colors array
(1) two round really slow method
* Time complexity: O(n*n)
* Space complexity: O(1)
public void sortColors(int[] nums) {
        if(nums == null || nums.length == 0) return;
        int i = 0;
        int j = 1;
        while(i<j && i<nums.length){
            while(j<nums.length){
                if(nums[j]<nums[i]){
                    int temp = nums[i];
                    nums[i] = nums[j];
                    nums[j] = temp;
                }
                j++;
            }
            i++;
            j=i+1;
        }
    }

(2) one round beats 100%
Only three numbers in the array, so we can using two pointers and sort in one round 

* Time complexity: O(N)
* Space complexity:O(1)
public void sortColors(int[] nums) {
        int p0 = 0, curr = 0, p2 = nums.length - 1;
        int temp;
        
        while(curr<=p2){
            if(nums[curr] == 0){
                temp = nums[p0];
                nums[p0] = nums[curr];
                nums[curr] = temp;
                curr++;
                p0++;
            }else if(nums[curr] == 2){
                temp = nums[p2];
                nums[p2] = nums[curr];
                nums[curr] = temp;
                p2--;
            }else curr++;
        }
    }

76. Minimum Window Substring sliding window

* Time complexity: O(s+t)
* Space complexity: O(s+t)
public String minWindow(String s, String t) {
        if(s.length() < t.length()) return "";
        Map<Character, Integer> map = new HashMap<>();
        for(char c: t.toCharArray()){
            if(map.containsKey(c)) map.put(c,map.get(c)+1);
            else map.put(c,1);
        }
        char[] sChar = s.toCharArray();
        
        int start = 0, end = 0;
        int leftMin = 0;
        int minLen = Integer.MAX_VALUE;
        int count = 0;
        while(end!=sChar.length){
            if(map.containsKey(sChar[end])){
                int n = map.get(sChar[end])-1;
                map.put(sChar[end],n);
                if(n>=0) count++;
            }
            while(count == t.length()){
                if(end-start+1<minLen){
                    leftMin = start;
                    minLen = end-start+1;
                }
                if(map.containsKey(sChar[start])){
                    int n = map.get(sChar[start])+1;
                    map.put(sChar[start],n);
                    if(n>0){
                        count--;
                    }
                }
                start++;
            }
            end++;
            
        }
        return (leftMin+minLen > s.length())?"":s.substring(leftMin, leftMin+minLen);
        
        
    }

initial version:

public String minWindow(String s, String t) {
        if(s == null || t == null || s.length() == 0 ||t.length() == 0) return "";
        int matchCount = 0;
        String res = "";
        int[] tArr = new int[256];
        for(char c : t.toCharArray()){
            tArr[c]++;
        }
        int[] sArr = new int[256];
        int left = findNextStrIndex(0,s,tArr);
        if(left == s.length()) return "";
        int right = left;
        
        //find first char in t, it's the start point
        while(right<s.length()){
            int rightChar = s.charAt(right);
            if(sArr[rightChar] < tArr[rightChar]){
                matchCount++;
            }
            sArr[rightChar]++;
            while(left<s.length() && matchCount == t.length()){
                if(res.isEmpty() || res.length() > right -left +1){
                    res = s.substring(left, right+1);
                }
                int leftChar = s.charAt(left);
                if(sArr[leftChar] <= tArr[leftChar]){
                    matchCount--;
                }
                sArr[leftChar]--;
                left = findNextStrIndex(left+1,s,tArr);
            }
            right = findNextStrIndex(right+1,s,tArr);
            
        }
        return res;
    }
    public int findNextStrIndex(int start, String s, int[] tArr){
        while(start < s.length()){
            char c = s.charAt(start);
            if(tArr[c]!=0) return start;
            start++;
        }
        return start;
    }

77. Combination backtracking
* Time complexity: O()
* Space complexity: O()
* 
public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(n<=0 || k<=0) return res;
        helper(n,k,1,res,new ArrayList<Integer>());
        return res;
    }
    private void helper(int n , int k, int startNum, List<List<Integer>> res, List<Integer> list){
        if(k == 0) res.add(new ArrayList<Integer>(list));
        else{
            for(int i = startNum; i<=n; i++){
                list.add(i);
                helper(n, k-1, i+1, res, list);
                list.remove(list.size()-1);
            }
        }
    }

78. Subsets backtracking
* Time complexity: O(2^N)
* Space complexity: O(N)
public List<List<Integer>> subsets(int[] nums) {
         List<List<Integer>> res = new ArrayList<List<Integer>>();
         if(nums.length == 0 || nums == null) return res;
         int index = 0;
         helper(res, nums, index, new ArrayList<Integer>());
         return res;
     }
    
    private void helper(List<List<Integer>> res, int[] nums, int index, List<Integer> list){
        if(index == nums.length) res.add(new ArrayList<Integer>(list));
        else{
            helper(res, nums, index+1, list);
            list.add(nums[index]);
            helper(res, nums, index+1, list);
            list.remove(list.size()-1);
        }     
    }

79. Word Search backtracking
* Time complexity:
* Space complexity:
public boolean exist(char[][] board, String word) {
        if(board == null) return false;
        boolean[][] used = new boolean[board.length][board[0].length];
        for(int row = 0; row<board.length; row++){
            for(int col = 0; col<board[0].length; col++){
                if(existHelper(board, used, word.toCharArray(),0,col,row)) return true;
            }
        }
        return false;
    }
    private boolean existHelper(char[][] board, boolean[][] used, char[] word,
                               int idx, int col, int row){
        if(idx == word.length) return true;
        if(row<0 || row>=board.length || col<0 || col>=board[0].length) return false;
        if(used[row][col] == true || board[row][col]!=word[idx]) return false;
        used[row][col] = true;
        //right
        boolean exist = existHelper(board, used, word, idx+1, col+1,row);
        if(exist) return true;
        //left
        exist = existHelper(board, used, word, idx+1, col-1, row);
        if(exist) return true;
        //down
        exist = existHelper(board, used, word, idx+1, col, row+1);
        if(exist) return true;
        //up
        exist = existHelper(board, used, word, idx+1, col, row-1);
        if(exist) return true;
        
        used[row][col] = false;
        return false;
    }

80. Remove Duplicates from Sorted Array II
Using loc to record the index has been done.
* Time complexity:O(N)
* Space complexity:O(1)
public int removeDuplicates(int[] nums) {
        if(nums == null || nums.length<=2) return nums.length;
        int loc = 2;
        for(int i = 2; i<nums.length; i++){
            if( !(nums[loc-1] == nums[loc-2] && nums[loc-1] == nums[i])){
                nums[loc] = nums[i];
                loc++;
            }
        }
        return loc;
    }
